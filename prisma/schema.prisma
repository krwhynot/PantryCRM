generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Setting {
  id                           String         @id @default(cuid())
  category                     String
  key                          String
  label                        String?
  color                        String?
  sortOrder                    Int
  active                       Boolean        @default(true)
  metadata                     String?        @db.Text
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
  contactsWithPosition         Contact[]      @relation("ContactPosition")
  organizationsWithDistributor Organization[] @relation("OrganizationDistributor")
  organizationsWithPriority    Organization[] @relation("OrganizationPriority")
  organizationsWithSegment     Organization[] @relation("OrganizationSegment")

  @@unique([category, key])
  @@index([category, active])
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  name                 String?
  image                String?
  emailVerified        DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  isActive             Boolean            @default(true)
  role                 String             @default("user")
  lastLoginAt          DateTime?
  password             String?
  accounts             Account[]
  interactions         Interaction[]
  opportunities        Opportunity[]
  managedOrganizations Organization[]     @relation("UserManagedOrganizations")
  organizations        OrganizationUser[]
  sessions             Session[]

  @@index([email])
  @@index([isActive])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id               String             @id @default(cuid())
  name             String
  description      String?            @db.Text
  website          String?
  phone            String?
  email            String?
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accountManagerId String?
  priorityId       String?
  segmentId        String?
  distributorId    String?
  annualRevenue    Decimal?           @db.Decimal(18, 2)
  totalValue       Decimal?           @db.Decimal(18, 2)
  contacts         Contact[]
  interactions     Interaction[]
  opportunities    Opportunity[]
  accountManager   User?              @relation("UserManagedOrganizations", fields: [accountManagerId], references: [id])
  distributor      Setting?           @relation("OrganizationDistributor", fields: [distributorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  priority         Setting?           @relation("OrganizationPriority", fields: [priorityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  segment          Setting?           @relation("OrganizationSegment", fields: [segmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            OrganizationUser[]

  @@index([name])
  @@index([city])
  @@index([state])
  @@index([postalCode])
  @@index([country])
  @@index([accountManagerId])
  @@index([priorityId])
  @@index([segmentId])
  @@index([distributorId])
  @@index([isActive])
}

model OrganizationUser {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([organizationId, userId])
  @@index([organizationId])
}

model Contact {
  id             String        @id @default(cuid())
  organizationId String
  firstName      String
  lastName       String
  email          String?
  phone          String?
  title          String?
  notes          String?       @db.Text
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  positionId     String?
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  position       Setting?      @relation("ContactPosition", fields: [positionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interactions   Interaction[]
  opportunities  Opportunity[]

  @@index([organizationId])
  @@index([firstName])
  @@index([lastName])
  @@index([email])
  @@index([phone])
  @@index([isActive])
  @@index([positionId])
}

model Interaction {
  id              String       @id @default(cuid())
  organizationId  String
  contactId       String?
  userId          String
  interactionDate DateTime
  typeId          String
  notes           String?      @db.Text
  followUpDate    DateTime?
  isCompleted     Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  contact         Contact?     @relation(fields: [contactId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  user            User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([organizationId])
  @@index([contactId])
  @@index([userId])
  @@index([interactionDate])
}

model Opportunity {
  id                String       @id @default(cuid())
  organizationId    String
  contactId         String?
  userId            String
  principal         String
  stage             String
  status            String
  source            String?
  reason            String?      @db.Text
  probability       Int
  expectedRevenue   Decimal?     @db.Decimal(10, 2)
  expectedCloseDate DateTime?
  notes             String?      @db.Text
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  contact           Contact?     @relation(fields: [contactId], references: [id])
  organization      Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  user              User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([organizationId])
  @@index([contactId])
  @@index([userId])
  @@index([principal])
  @@index([stage])
  @@index([status])
  @@index([isActive])
  @@index([expectedCloseDate])
}
