generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             String    @default("user")
  isActive         Boolean   @default(true)
  lastLoginAt      DateTime?
  resetToken       String?   // For secure password reset
  resetTokenExpiry DateTime? // Reset token expiration
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  assignedLeads Lead[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// CRM Models
model Organization {
  id                String   @id @default(cuid())
  name              String
  priority          String   // A, B, C, D
  segment           String   // FINE_DINING, FAST_FOOD, etc.
  type              String   @default("PROSPECT") // PROSPECT, CUSTOMER, INACTIVE
  address           String?
  city              String?
  state             String?
  zipCode           String?
  phone             String?
  email             String?
  website           String?
  notes             String?
  estimatedRevenue  Float?
  employeeCount     Int?
  primaryContact    String?
  lastContactDate   DateTime?
  nextFollowUpDate  DateTime?
  status            String   @default("ACTIVE") // ACTIVE, INACTIVE, LEAD
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  contacts      Contact[]
  interactions  Interaction[]
  opportunities Opportunity[]
  leads         Lead[]
  contracts     Contract[]

  // Performance indexes optimized for Azure SQL Basic (5 DTU)
  @@index([status, priority, name]) // For filtered searches
  @@index([name]) // For text search
  @@index([email]) // For email search
  @@index([priority, updatedAt]) // For dashboard ordering
  @@index([segment, status]) // For segment filtering
  @@index([lastContactDate]) // For follow-up queries
  @@index([nextFollowUpDate]) // For upcoming tasks
  
  // New composite indexes for search performance
  @@index([status, priority, segment]) // Multi-filter queries
  @@index([lastContactDate, nextFollowUpDate]) // Follow-up workflows
  @@index([priority, estimatedRevenue]) // Revenue-priority analysis
  @@index([segment, estimatedRevenue]) // Segment revenue analysis
}

model Contact {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  position       String?
  isPrimary      Boolean      @default(false)
  notes          String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  interactions  Interaction[]
  opportunities Opportunity[]
  contracts     Contract[]

  // Performance indexes optimized for Azure SQL Basic
  @@index([organizationId, isPrimary]) // For finding primary contacts
  @@index([firstName, lastName]) // For name searches
  @@index([email]) // For email lookups
  @@index([organizationId, createdAt]) // For recent contacts by org
  
  // New indexes for contact search optimization
  @@index([organizationId, position]) // Position-based contact queries
  @@index([isPrimary, updatedAt]) // Primary contact listings
}

model Interaction {
  id             String       @id @default(cuid())
  type           String       // CALL, EMAIL, MEETING, VISIT, etc.
  subject        String
  description    String?
  date           DateTime
  duration       Int?         // in minutes
  outcome        String?      // POSITIVE, NEUTRAL, NEGATIVE, FOLLOW_UP_NEEDED
  nextAction     String?
  organizationId String
  contactId      String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact        Contact?     @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Performance indexes optimized for Azure SQL Basic
  @@index([organizationId, date]) // For interaction history by org
  @@index([contactId, date]) // For interaction history by contact
  @@index([type, date]) // For filtering by interaction type
  @@index([date]) // For chronological queries
  @@index([nextAction]) // For follow-up tasks
  @@index([outcome, date]) // For outcome analysis
  
  // New indexes for interaction reporting and analytics
  @@index([type, outcome, date]) // Type-outcome analysis
  @@index([organizationId, type, date]) // Org-specific interaction types
  @@index([outcome, nextAction]) // Follow-up action planning
}

// CRM Extension Models
model Opportunity {
  id                String   @id @default(cuid())
  name              String
  organizationId    String
  contactId         String?
  value             Float?
  stage             String   @default("PROSPECT") // PROSPECT, QUALIFIED, PROPOSAL, NEGOTIATION, CLOSED_WON, CLOSED_LOST
  probability       Int      @default(50) // 0-100%
  expectedCloseDate DateTime?
  notes             String?
  reason            String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact      Contact?     @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Performance indexes
  @@index([organizationId, stage])
  @@index([stage, expectedCloseDate])
  @@index([isActive, updatedAt])
}

// Update Organization model to include the opportunity relation
model Lead {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  company        String?
  source         String?      // Website, referral, cold call, etc.
  status         String       @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED, LOST
  notes          String?
  organizationId String?
  assignedToId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  assignedTo   User?         @relation(fields: [assignedToId], references: [id], onDelete: SetNull)

  @@index([status, createdAt])
  @@index([organizationId])
  @@index([assignedToId])
}

model Contract {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  contactId      String?
  value          Float?
  startDate      DateTime?
  endDate        DateTime?
  status         String       @default("DRAFT") // DRAFT, ACTIVE, EXPIRED, CANCELLED
  terms          String?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact      Contact?     @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([organizationId, status])
  @@index([status, endDate])
}

// Settings Models
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance indexes for common queries
  @@index([key]) // For settings lookups
  @@index([type]) // For filtering by setting type
}