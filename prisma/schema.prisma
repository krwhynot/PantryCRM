generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Contact {
  id             String        @id
  organizationId String
  firstName      String
  lastName       String
  email          String?
  phone          String?
  title          String?
  notes          String?       @db.Text
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  positionId     String?
  Organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Setting        Setting?      @relation(fields: [positionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Interaction    Interaction[]
  Opportunity    Opportunity[]

  @@index([email])
  @@index([firstName])
  @@index([isActive])
  @@index([lastName])
  @@index([organizationId])
  @@index([phone])
  @@index([positionId])
}

model Interaction {
  id              String       @id
  organizationId  String
  contactId       String?
  userId          String
  interactionDate DateTime
  typeId          String
  notes           String?      @db.Text
  followUpDate    DateTime?
  isCompleted     Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  Contact         Contact?     @relation(fields: [contactId], references: [id])
  Organization    Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  User            User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([contactId])
  @@index([interactionDate])
  @@index([organizationId])
  @@index([userId])
}

model Opportunity {
  id                String       @id
  organizationId    String
  contactId         String?
  userId            String
  principal         String
  stage             String
  status            String
  source            String?
  reason            String?      @db.Text
  probability       Int
  expectedRevenue   Decimal?     @db.Decimal(10, 2)
  expectedCloseDate DateTime?
  notes             String?      @db.Text
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime
  Contact           Contact?     @relation(fields: [contactId], references: [id])
  Organization      Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  User              User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([contactId])
  @@index([expectedCloseDate])
  @@index([isActive])
  @@index([organizationId])
  @@index([principal])
  @@index([stage])
  @@index([status])
  @@index([userId])
}

model Organization {
  id                                          String             @id
  name                                        String
  description                                 String?            @db.Text
  website                                     String?
  phone                                       String?
  email                                       String?
  addressLine1                                String?
  addressLine2                                String?
  city                                        String?
  state                                       String?
  postalCode                                  String?
  country                                     String?
  isActive                                    Boolean            @default(true)
  createdAt                                   DateTime           @default(now())
  updatedAt                                   DateTime
  accountManagerId                            String?
  priorityId                                  String?
  segmentId                                   String?
  distributorId                               String?
  annualRevenue                               Decimal?           @db.Decimal(18, 2)
  totalValue                                  Decimal?           @db.Decimal(18, 2)
  Contact                                     Contact[]
  Interaction                                 Interaction[]
  Opportunity                                 Opportunity[]
  User                                        User?              @relation(fields: [accountManagerId], references: [id])
  Setting_Organization_distributorIdToSetting Setting?           @relation("Organization_distributorIdToSetting", fields: [distributorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Setting_Organization_priorityIdToSetting    Setting?           @relation("Organization_priorityIdToSetting", fields: [priorityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Setting_Organization_segmentIdToSetting     Setting?           @relation("Organization_segmentIdToSetting", fields: [segmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  OrganizationUser                            OrganizationUser[]

  @@index([accountManagerId])
  @@index([city])
  @@index([country])
  @@index([distributorId])
  @@index([isActive])
  @@index([name])
  @@index([postalCode])
  @@index([priorityId])
  @@index([segmentId])
  @@index([state])
}

model OrganizationUser {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: NoAction)
  User           User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([organizationId, userId])
  @@index([organizationId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  id                                               String         @id
  category                                         String
  key                                              String
  label                                            String?
  color                                            String?
  sortOrder                                        Int
  active                                           Boolean        @default(true)
  metadata                                         String?        @db.Text
  createdAt                                        DateTime       @default(now())
  updatedAt                                        DateTime
  Contact                                          Contact[]
  Organization_Organization_distributorIdToSetting Organization[] @relation("Organization_distributorIdToSetting")
  Organization_Organization_priorityIdToSetting    Organization[] @relation("Organization_priorityIdToSetting")
  Organization_Organization_segmentIdToSetting     Organization[] @relation("Organization_segmentIdToSetting")

  @@unique([category, key])
  @@index([category, active])
}

model User {
  id               String             @id
  email            String             @unique
  name             String?
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  isActive         Boolean            @default(true)
  role             String             @default("user")
  lastLoginAt      DateTime?
  password         String?
  Account          Account[]
  Interaction      Interaction[]
  Opportunity      Opportunity[]
  Organization     Organization[]
  OrganizationUser OrganizationUser[]
  Session          Session[]

  @@index([email])
  @@index([isActive])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
