generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// CRM Models
model Organization {
  id                String   @id @default(cuid())
  name              String
  priority          String   // A, B, C, D
  segment           String   // FINE_DINING, FAST_FOOD, etc.
  type              String   @default("PROSPECT") // PROSPECT, CUSTOMER, INACTIVE
  address           String?
  city              String?
  state             String?
  zipCode           String?
  phone             String?
  email             String?
  website           String?
  notes             String?
  estimatedRevenue  Float?
  employeeCount     Int?
  primaryContact    String?
  lastContactDate   DateTime?
  nextFollowUpDate  DateTime?
  status            String   @default("ACTIVE") // ACTIVE, INACTIVE, LEAD
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  contacts     Contact[]
  interactions Interaction[]
}

model Contact {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  position       String?
  isPrimary      Boolean      @default(false)
  notes          String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  interactions Interaction[]
}

model Interaction {
  id             String       @id @default(cuid())
  type           String       // CALL, EMAIL, MEETING, VISIT, etc.
  subject        String
  description    String?
  date           DateTime
  duration       Int?         // in minutes
  outcome        String?      // POSITIVE, NEUTRAL, NEGATIVE, FOLLOW_UP_NEEDED
  nextAction     String?
  organizationId String
  contactId      String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contact        Contact?     @relation(fields: [contactId], references: [id], onDelete: SetNull)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Settings Models
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}