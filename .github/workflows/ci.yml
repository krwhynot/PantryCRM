name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1
  DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
  GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
  GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
  GITHUB_ID: ${{ secrets.GITHUB_ID }}
  GITHUB_SECRET: ${{ secrets.GITHUB_SECRET }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  # Job 1: Code Quality Checks
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps

      - name: TypeScript type checking
        run: npm run typecheck:production
        continue-on-error: false

      - name: ESLint
        run: npm run lint -- --max-warnings=0
        continue-on-error: false

      - name: Prettier formatting check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,scss,md}"

      - name: Check for console statements
        run: |
          ! grep -r "console\." --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next src/ || \
          (echo "::error::Console statements found in production code" && exit 1)

  # Job 2: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
        continue-on-error: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified

  # Job 3: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks]
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          npx prisma generate
          npx prisma db push
          npx prisma db seed

      - name: Run unit tests with coverage
        run: npm run test:ci -- --coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella

      - name: Check test coverage thresholds
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Code coverage is below 80% threshold"
            exit 1
          fi

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run E2E tests
        run: |
          npx playwright install --with-deps
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          BASE_URL: http://localhost:3000

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts-${{ matrix.node-version }}
          path: |
            test-results/
            playwright-report/
            coverage/

  # Job 4: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-and-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          sleep 10  # Wait for server to start

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/api/health
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./lighthouserc.js

      - name: Run load testing
        run: |
          npm install -g autocannon
          autocannon -c 100 -d 30 -p 10 http://localhost:3000/api/health > load-test-results.txt
          cat load-test-results.txt

      - name: Check performance benchmarks
        run: |
          # Extract metrics from load test results
          LATENCY_P99=$(grep "99%" load-test-results.txt | awk '{print $2}')
          REQUESTS_SEC=$(grep "Req/Sec" load-test-results.txt | awk '{print $2}')
          
          echo "P99 Latency: ${LATENCY_P99}ms"
          echo "Requests/sec: $REQUESTS_SEC"
          
          # Check against thresholds
          if (( $(echo "$LATENCY_P99 > 500" | bc -l) )); then
            echo "::warning::P99 latency exceeds 500ms threshold"
          fi

      - name: Bundle size analysis
        run: |
          npm run analyze:simple > bundle-analysis.txt
          cat bundle-analysis.txt
          
          # Check bundle size
          BUNDLE_SIZE=$(grep "Total size" bundle-analysis.txt | awk '{print $3}' | sed 's/[^0-9.]//g')
          if (( $(echo "$BUNDLE_SIZE > 1000" | bc -l) )); then
            echo "::warning::Bundle size exceeds 1MB threshold"
          fi

  # Job 5: Docker Build (if applicable)
  docker-build:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-scan, build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/image.tar
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Dependency License Check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check licenses
        run: |
          npx license-checker --production --summary --excludePrivatePackages > licenses.txt
          cat licenses.txt
          
          # Check for problematic licenses
          if grep -E "(GPL|AGPL|LGPL)" licenses.txt; then
            echo "::warning::Found packages with copyleft licenses"
          fi

  # Final job to ensure all checks pass
  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, build-and-test, performance-test, docker-build, license-check]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.quality-checks.result }}" != "success" ]] || \
             [[ "${{ needs.security-scan.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
            echo "::error::One or more required jobs failed"
            exit 1
          fi
          echo "✅ All checks passed successfully!"

      - name: Add status comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('CI Pipeline Results')
            );
            
            const body = `## 🚀 CI Pipeline Results
            
            ✅ **All checks passed!**
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ✅ Passed |
            | Security Scan | ✅ Passed |
            | Build & Test | ✅ Passed |
            | Performance | ✅ Passed |
            | Docker Build | ✅ Passed |
            | License Check | ✅ Passed |
            
            **Commit:** ${{ github.sha }}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }