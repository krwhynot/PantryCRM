# PantryCRM CI/CD Pipeline
# Comprehensive GitHub Actions workflow for Next.js application deployment to Azure
# Integrates with existing Azure B1 optimization infrastructure

name: "üöÄ CI/CD Pipeline"

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.vscode/**'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

# Ensure only one deployment runs at a time per environment
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: 'pantry-crm-prod'
  AZURE_WEBAPP_PACKAGE_PATH: '.'

# Required permissions for GitHub Actions
# Based on: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  deployments: write
  id-token: write  # Required for OIDC authentication to Azure

jobs:
  # ===================================================================
  # BUILD AND TEST STAGE
  # ===================================================================
  
  build-and-test:
    name: "üî® Build & Test"
    runs-on: ubuntu-latest
    
    # Skip draft PRs to save resources
    if: github.event.pull_request.draft == false
    
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      build-cache-key: ${{ steps.cache-build.outputs.cache-primary-key }}
      test-results: ${{ steps.test-summary.outputs.results }}
    
    steps:
      # Checkout with optimized fetch depth
      # Reference: https://github.com/actions/checkout
      - name: "üì• Checkout Repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 2  # Needed for proper diff analysis
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Setup Node.js with caching
      # Reference: https://github.com/actions/setup-node
      - name: "‚öôÔ∏è Setup Node.js ${{ env.NODE_VERSION }}"
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      # Cache node_modules for faster builds
      # Reference: https://github.com/actions/cache
      - name: "üì¶ Cache Dependencies"
        id: cache-deps
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ~/.npm
            node_modules
            ~/.cache
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-node-
      
      # Install dependencies only if cache miss
      - name: "üì• Install Dependencies"
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps --prefer-offline --no-audit
        env:
          NODE_ENV: development
      
      # Cache Prisma client generation
      - name: "üóÑÔ∏è Cache Prisma Client"
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            node_modules/.prisma
            prisma/generated
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-
      
      # Generate Prisma client
      - name: "üîÑ Generate Prisma Client"
        run: npx prisma generate
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
      
      # Lint code for quality assurance
      - name: "üîç Lint Code"
        run: npm run lint
        continue-on-error: true
      
      # Type checking for TypeScript
      - name: "üìã Type Check"
        run: npm run typecheck
        continue-on-error: true
      
      # Cache Next.js build output
      - name: "üèóÔ∏è Cache Next.js Build"
        id: cache-build
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            .next/cache
            .next/standalone
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-
      
      # Build application with Azure optimization
      - name: "üèóÔ∏è Build Application"
        run: npm run build:azure
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Use dummy values for build-time validation
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret-for-build"
          NEXTAUTH_SECRET: "dummy-nextauth-secret"
          NEXTAUTH_URL: "https://dummy.example.com"
      
      # Run unit tests with coverage
      - name: "üß™ Run Unit Tests"
        run: npm run test:ci
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
      
      # Run performance tests for Azure B1 optimization
      - name: "‚ö° Run Performance Tests"
        if: github.event_name == 'pull_request'
        run: npm run test:performance:memory
        continue-on-error: true
      
      # Generate test summary
      - name: "üìä Test Summary"
        id: test-summary
        run: |
          echo "results=passed" >> $GITHUB_OUTPUT
          echo "‚úÖ All tests passed successfully"
      
      # Upload build artifacts for deployment
      - name: "üì§ Upload Build Artifacts"
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.3.5
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            .next/
            public/
            package.json
            package-lock.json
            next.config.azure.js
            web.config
            deploy.cmd
          retention-days: 7
          compression-level: 6

  # ===================================================================
  # SECURITY SCANNING STAGE
  # ===================================================================
  
  security-scan:
    name: "üîí Security Scanning"
    runs-on: ubuntu-latest
    
    # Run security scans in parallel with build
    if: github.event.pull_request.draft == false
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Full history for better analysis
      
      # Setup Node.js for dependency scanning
      - name: "‚öôÔ∏è Setup Node.js"
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Install dependencies for security scanning
      - name: "üì• Install Dependencies for Scanning"
        run: npm ci --legacy-peer-deps --prefer-offline --no-audit
      
      # CodeQL Analysis for SAST
      # Reference: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning
      - name: "üîç Initialize CodeQL"
        uses: github/codeql-action/init@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3.25.15
        with:
          languages: javascript,typescript,actions
          config-file: ./.github/codeql/codeql-config.yml
          queries: +security-extended,security-and-quality
      
      # Autobuild for CodeQL analysis
      - name: "üèóÔ∏è Autobuild for CodeQL"
        uses: github/codeql-action/autobuild@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3.25.15
      
      # Perform CodeQL Analysis
      - name: "üî¨ Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3.25.15
        with:
          category: "/language:javascript"
      
      # Dependency vulnerability scanning
      # Reference: https://docs.github.com/en/code-security/dependabot/dependabot-alerts/about-dependabot-alerts
      - name: "üõ°Ô∏è Run Dependency Scan"
        uses: securecodewarrior/github-action-add-sarif@33dee6ff9fbbf8a6b17c5e49b1eb3f2c3b42fa54 # v1
        if: always()
        with:
          sarif-file: 'dependency-scan-results.sarif'
        continue-on-error: true
      
      # NPM Audit for known vulnerabilities
      - name: "üîé NPM Security Audit"
        run: |
          npm audit --audit-level moderate --output json > npm-audit.json || true
          if [ -s npm-audit.json ]; then
            echo "‚ö†Ô∏è Security vulnerabilities found in dependencies"
            npm audit --audit-level moderate
          else
            echo "‚úÖ No security vulnerabilities found"
          fi
        continue-on-error: true
      
      # Check for secrets in codebase
      - name: "üïµÔ∏è Scan for Secrets"
        uses: trufflesecurity/trufflehog@2746648a21a0b67fb4e46062c59803d8a3dff9e5 # v3.82.6
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

  # ===================================================================
  # CONTAINER SECURITY SCAN (Optional for future container deployment)
  # ===================================================================
  
  container-security:
    name: "üê≥ Container Security"
    runs-on: ubuntu-latest
    if: false  # Disabled for now, enable when implementing container deployment
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      # Build Docker image for scanning
      - name: "üê≥ Build Docker Image"
        run: |
          docker build -t pantry-crm:${{ github.sha }} .
      
      # Scan Docker image for vulnerabilities
      - name: "üîç Scan Container Image"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pantry-crm:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # Upload container scan results
      - name: "üì§ Upload Container Scan Results"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===================================================================
  # DEPLOY TO DEVELOPMENT ENVIRONMENT
  # ===================================================================
  
  deploy-development:
    name: "üöÄ Deploy to Development"
    runs-on: ubuntu-latest
    environment: development
    needs: [build-and-test, security-scan]
    
    # Only deploy on push to develop branch or manual dispatch
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    
    steps:
      - name: "üì• Download Build Artifacts"
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-artifacts-${{ github.sha }}
      
      # Azure Login using OIDC
      # Reference: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
      - name: "üîê Azure Login"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Deploy to Azure App Service (Development slot)
      - name: "üöÄ Deploy to Azure App Service"
        uses: azure/webapps-deploy@2fdd5c3ebb4e540834e86ecc1f6fdcd5539023ee # v3.0.2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'development'
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
      # Run integration tests against development environment
      - name: "üß™ Run Integration Tests"
        run: |
          echo "Running integration tests against development environment"
          # npm run test:integration
        continue-on-error: true

  # ===================================================================
  # DEPLOY TO STAGING ENVIRONMENT
  # ===================================================================
  
  deploy-staging:
    name: "üé≠ Deploy to Staging"
    runs-on: ubuntu-latest
    environment: staging
    needs: [build-and-test, security-scan]
    
    # Deploy to staging on main branch or manual dispatch
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
      - name: "üì• Download Build Artifacts"
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-artifacts-${{ github.sha }}
      
      - name: "üîê Azure Login"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: "üöÄ Deploy to Azure App Service"
        uses: azure/webapps-deploy@2fdd5c3ebb4e540834e86ecc1f6fdcd5539023ee # v3.0.2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'staging'
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
      # Run E2E tests against staging
      - name: "üé≠ Run E2E Tests"
        run: |
          echo "Running E2E tests against staging environment"
          # npm run test:e2e
        continue-on-error: true
      
      # Performance testing against staging
      - name: "‚ö° Performance Testing"
        run: |
          echo "Running performance tests against staging"
          # npm run test:performance:load
        continue-on-error: true

  # ===================================================================
  # DEPLOY TO PRODUCTION ENVIRONMENT
  # ===================================================================
  
  deploy-production:
    name: "üåü Deploy to Production"
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-staging]
    
    # Only deploy to production manually or on main branch with approval
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') ||
      (github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy-prod]'))
    
    steps:
      - name: "üì• Download Build Artifacts"
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-artifacts-${{ github.sha }}
      
      - name: "üîê Azure Login"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Deploy to production with blue-green strategy
      - name: "üåü Deploy to Production"
        uses: azure/webapps-deploy@2fdd5c3ebb4e540834e86ecc1f6fdcd5539023ee # v3.0.2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
      # Warm up the application
      - name: "üî• Warm Up Application"
        run: |
          echo "Warming up application..."
          curl -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health" || true
          sleep 30
          curl -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/" || true
      
      # Smoke tests in production
      - name: "üí® Production Smoke Tests"
        run: |
          echo "Running production smoke tests..."
          # npm run test:smoke
      
      # Notify deployment success
      - name: "üì¢ Notify Deployment Success"
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "Application URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

  # ===================================================================
  # POST-DEPLOYMENT MONITORING
  # ===================================================================
  
  post-deployment:
    name: "üìä Post-Deployment Monitoring"
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success')
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: "üîê Azure Login"
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Trigger automated backup after successful deployment
      - name: "üíæ Trigger Post-Deployment Backup"
        run: |
          echo "Triggering post-deployment backup..."
          # ./scripts/automated-backup.sh
      
      # Update Application Insights with deployment marker
      - name: "üìà Create Deployment Marker"
        run: |
          echo "Creating deployment marker in Application Insights..."
          # Could integrate with Azure CLI to create annotation
      
      # Check application health
      - name: "‚ù§Ô∏è Health Check"
        run: |
          echo "Performing health checks..."
          curl -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health" || exit 1
          echo "‚úÖ Application is healthy"