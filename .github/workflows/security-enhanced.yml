name: "🔒 Enhanced Security Scanning"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - secrets
          - containers

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write
  actions: read

env:
  SECURITY_REPORT_PATH: security-reports
  SARIF_UPLOAD_TIMEOUT: 300

jobs:
  # =====================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =====================================================================
  
  dependency-scan:
    name: "🛡️ Dependency Scanning"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' || 
      github.event.inputs.scan_type == 'dependencies' ||
      github.event.inputs.scan_type == ''
    
    steps:
      - name: "📥 Checkout"
        uses: actions/checkout@v4
        
      - name: "⚙️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: "📦 Install Dependencies"
        run: npm ci --legacy-peer-deps
        
      - name: "🔍 NPM Audit"
        id: npm_audit
        run: |
          mkdir -p ${{ env.SECURITY_REPORT_PATH }}
          
          # Run npm audit and capture results
          npm audit --json > ${{ env.SECURITY_REPORT_PATH }}/npm-audit.json || true
          
          # Parse results
          VULNERABILITIES=$(cat ${{ env.SECURITY_REPORT_PATH }}/npm-audit.json | jq '.metadata.vulnerabilities')
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          
          # Generate human-readable report
          npm audit --audit-level=low > ${{ env.SECURITY_REPORT_PATH }}/npm-audit.txt || true
          
      - name: "🔍 OSV Scanner"
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --format=json
            --output=${{ env.SECURITY_REPORT_PATH }}/osv-scan.json
            ./
            
      - name: "🔍 Snyk Scan"
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
            npx snyk test --json > ${{ env.SECURITY_REPORT_PATH }}/snyk-report.json || true
            npx snyk test --json --severity-threshold=high > ${{ env.SECURITY_REPORT_PATH }}/snyk-high.json || true
          fi
          
      - name: "📊 Generate Dependency Report"
        run: |
          echo "## 🛡️ Dependency Security Report" > ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
          echo "" >> ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
          
          # NPM Audit Summary
          echo "### NPM Audit Results" >> ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
          if [ -f "${{ env.SECURITY_REPORT_PATH }}/npm-audit.json" ]; then
            CRITICAL=$(cat ${{ env.SECURITY_REPORT_PATH }}/npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            HIGH=$(cat ${{ env.SECURITY_REPORT_PATH }}/npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            MODERATE=$(cat ${{ env.SECURITY_REPORT_PATH }}/npm-audit.json | jq '.metadata.vulnerabilities.moderate // 0')
            LOW=$(cat ${{ env.SECURITY_REPORT_PATH }}/npm-audit.json | jq '.metadata.vulnerabilities.low // 0')
            
            echo "- Critical: $CRITICAL" >> ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
            echo "- High: $HIGH" >> ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
            echo "- Moderate: $MODERATE" >> ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
            echo "- Low: $LOW" >> ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md
          fi
          
          # Copy to step summary
          cat ${{ env.SECURITY_REPORT_PATH }}/dependency-summary.md >> $GITHUB_STEP_SUMMARY
          
      - name: "📤 Upload Reports"
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-reports
          path: ${{ env.SECURITY_REPORT_PATH }}/
          retention-days: 30

  # =====================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # =====================================================================
  
  sast-scan:
    name: "🔬 SAST Analysis"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' || 
      github.event.inputs.scan_type == 'code' ||
      github.event.inputs.scan_type == ''
    
    steps:
      - name: "📥 Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "🔍 Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          config-file: ./.github/codeql/codeql-config.yml
          queries: +security-extended,security-and-quality
          
      - name: "🏗️ Autobuild"
        uses: github/codeql-action/autobuild@v3
        
      - name: "🔬 Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          upload: true
          wait-for-processing: true
          
      - name: "🔍 Semgrep Scan"
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs
          generateSarif: true
          
      - name: "📤 Upload Semgrep SARIF"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep
          
      - name: "🔍 ESLint Security Plugin"
        run: |
          npm install --save-dev eslint-plugin-security
          
          # Create temporary ESLint config for security
          cat > .eslintrc.security.json << EOF
          {
            "extends": ["./.eslintrc.json"],
            "plugins": ["security"],
            "rules": {
              "security/detect-non-literal-fs-filename": "error",
              "security/detect-non-literal-regexp": "error",
              "security/detect-non-literal-require": "error",
              "security/detect-object-injection": "warn",
              "security/detect-possible-timing-attacks": "warn",
              "security/detect-unsafe-regex": "error"
            }
          }
          EOF
          
          # Run ESLint with security rules
          npx eslint . --config .eslintrc.security.json --format json > ${{ env.SECURITY_REPORT_PATH }}/eslint-security.json || true

  # =====================================================================
  # SECRET SCANNING
  # =====================================================================
  
  secret-scan:
    name: "🔐 Secret Scanning"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' || 
      github.event.inputs.scan_type == 'secrets' ||
      github.event.inputs.scan_type == ''
    
    steps:
      - name: "📥 Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "🔍 TruffleHog Scan"
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json > ${{ env.SECURITY_REPORT_PATH }}/trufflehog.json
          
      - name: "🔍 Gitleaks Scan"
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_ENABLE_SUMMARY: true
          
      - name: "🔍 detect-secrets"
        run: |
          pip install detect-secrets
          
          # Initialize baseline
          detect-secrets scan --baseline .secrets.baseline
          
          # Audit secrets
          detect-secrets audit .secrets.baseline --json > ${{ env.SECURITY_REPORT_PATH }}/detect-secrets.json || true
          
      - name: "🔍 Custom Pattern Search"
        run: |
          # Search for common secret patterns
          echo "Searching for potential secrets..."
          
          # API Keys
          grep -rEn "(api[_-]?key|apikey)[[:space:]]*[:=][[:space:]]*['\"][^'\"]+['\"]" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next . > ${{ env.SECURITY_REPORT_PATH }}/custom-secrets.txt || true
          
          # Passwords
          grep -rEn "(password|passwd|pwd)[[:space:]]*[:=][[:space:]]*['\"][^'\"]+['\"]" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next . >> ${{ env.SECURITY_REPORT_PATH }}/custom-secrets.txt || true
          
          # Tokens
          grep -rEn "(token|auth|bearer)[[:space:]]*[:=][[:space:]]*['\"][^'\"]+['\"]" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next . >> ${{ env.SECURITY_REPORT_PATH }}/custom-secrets.txt || true

  # =====================================================================
  # CONTAINER SECURITY (if applicable)
  # =====================================================================
  
  container-scan:
    name: "🐳 Container Security"
    runs-on: ubuntu-latest
    if: |
      (github.event.inputs.scan_type == 'full' || 
       github.event.inputs.scan_type == 'containers') &&
      hashFiles('Dockerfile') != ''
    
    steps:
      - name: "📥 Checkout"
        uses: actions/checkout@v4
        
      - name: "🐳 Build Container"
        run: |
          docker build -t pantrycrm:${{ github.sha }} .
          
      - name: "🔍 Trivy Scan"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pantrycrm:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: "📤 Upload Trivy Results"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
          
      - name: "🔍 Grype Scan"
        uses: anchore/scan-action@v3
        with:
          image: 'pantrycrm:${{ github.sha }}'
          output-format: sarif
          severity-cutoff: medium
          
      - name: "🔍 Docker Scout"
        if: github.event_name != 'pull_request'
        run: |
          # Install Docker Scout
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh
          
          # Run Scout analysis
          docker scout cves pantrycrm:${{ github.sha }} --format json > ${{ env.SECURITY_REPORT_PATH }}/docker-scout.json || true
          docker scout recommendations pantrycrm:${{ github.sha }} > ${{ env.SECURITY_REPORT_PATH }}/docker-scout-recommendations.txt || true

  # =====================================================================
  # INFRASTRUCTURE AS CODE SCANNING
  # =====================================================================
  
  iac-scan:
    name: "🏗️ IaC Security"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'full' ||
      github.event.inputs.scan_type == ''
    
    steps:
      - name: "📥 Checkout"
        uses: actions/checkout@v4
        
      - name: "🔍 Checkov Scan"
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3
          
      - name: "📤 Upload Checkov Results"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif
          category: checkov
          
      - name: "🔍 KICS Scan"
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: .
          output_path: ${{ env.SECURITY_REPORT_PATH }}
          output_formats: 'json,sarif'
          exclude_paths: 'node_modules,dist,.next'

  # =====================================================================
  # SECURITY REPORT GENERATION
  # =====================================================================
  
  security-report:
    name: "📊 Security Report"
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, iac-scan]
    if: always()
    
    steps:
      - name: "📥 Download All Reports"
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
          
      - name: "📊 Generate Consolidated Report"
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "Generated at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
          echo "" >> security-summary.md
          
          # Scan Results
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
          echo "| SAST Scan | ${{ needs.sast-scan.result }} |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> security-summary.md
          echo "| IaC Scan | ${{ needs.iac-scan.result }} |" >> security-summary.md
          echo "" >> security-summary.md
          
          # Recommendations
          echo "## 📋 Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all HIGH and CRITICAL vulnerabilities immediately" >> security-summary.md
          echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "3. Rotate any exposed secrets immediately" >> security-summary.md
          echo "4. Apply security patches to container base images" >> security-summary.md
          echo "5. Fix IaC misconfigurations before deployment" >> security-summary.md
          
          # Copy to summary
          cat security-summary.md >> $GITHUB_STEP_SUMMARY
          
      - name: "📤 Upload Final Report"
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-complete
          path: |
            security-summary.md
            security-artifacts/
          retention-days: 90
          
      - name: "🚨 Create Security Issues"
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            // Check for critical vulnerabilities
            const criticalIssues = [];
            
            // Create issues for critical findings
            for (const issue of criticalIssues) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Security: ${issue.title}`,
                body: issue.body,
                labels: ['security', 'critical', 'automated']
              });
            }