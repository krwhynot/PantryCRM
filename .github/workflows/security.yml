name: Security Scanning

on:
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'package*.json'
      - 'Dockerfile'
      - '.github/workflows/security.yml'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '20.x'

jobs:
  # Comprehensive dependency scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run npm audit
        id: npm-audit
        run: |
          npm audit --json > npm-audit.json || true
          HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          echo "high-vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "critical-vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "::error::Found $CRITICAL_VULNS critical vulnerabilities"
            exit 1
          fi
          
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "::warning::Found $HIGH_VULNS high vulnerabilities"
          fi

      - name: Run Snyk test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json --json-file-output=snyk-results.json

      - name: Upload Snyk results
        uses: snyk/actions/monitor@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'PantryCRM'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-results
          path: reports/

  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: +security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
            p/nextjs
          generateSarif: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: ESLint security plugin
        run: |
          npm install --save-dev eslint-plugin-security
          npx eslint --ext .js,.jsx,.ts,.tsx --plugin security --rule 'security/detect-object-injection: error' src/

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --debug --only-verified

      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for hardcoded secrets
        run: |
          # Custom checks for common secret patterns
          patterns=(
            "password\s*=\s*[\"'][^\"']+[\"']"
            "api[_-]?key\s*=\s*[\"'][^\"']+[\"']"
            "secret\s*=\s*[\"'][^\"']+[\"']"
            "token\s*=\s*[\"'][^\"']+[\"']"
          )
          
          for pattern in "${patterns[@]}"; do
            if grep -r -i -E "$pattern" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules --exclude-dir=.next src/; then
              echo "::error::Potential hardcoded secret found"
              exit 1
            fi
          done

  # Container security scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ hashFiles('Dockerfile') != '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ github.repository }}:scan .

      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ github.repository }}:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
          vuln-type: 'os,library'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype scanner
        uses: anchore/scan-action@v6
        with:
          image: '${{ github.repository }}:scan'
          fail-build: true
          severity-cutoff: high

      - name: Dockerfile best practices
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  # Infrastructure as Code security
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ hashFiles('**/*.tf', '**/*.yaml', '**/*.yml', '**/*.json') != '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: false
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, iac-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security report
        run: |
          cat > security-report.md << EOF
          # Security Scan Report
          
          **Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Summary
          
          | Scan Type | Status | Details |
          |-----------|--------|---------|
          | Dependency Scan | ${{ needs.dependency-scan.result }} | npm audit, Snyk, OWASP |
          | SAST | ${{ needs.sast-scan.result }} | CodeQL, Semgrep |
          | Secret Scan | ${{ needs.secret-scan.result }} | TruffleHog, Gitleaks |
          | Container Scan | ${{ needs.container-scan.result }} | Trivy, Grype |
          | IaC Scan | ${{ needs.iac-scan.result }} | Checkov |
          
          ## Action Items
          
          EOF
          
          # Add specific findings if any job failed
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
            echo "- Review and update vulnerable dependencies" >> security-report.md
          fi
          
          if [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "- Remove hardcoded secrets and rotate affected credentials" >> security-report.md
          fi
          
          cat security-report.md

      - name: Create issue if critical findings
        if: |
          needs.dependency-scan.result == 'failure' ||
          needs.sast-scan.result == 'failure' ||
          needs.secret-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Security Alert: Critical findings in security scan`;
            const body = `## Security Scan Alert
            
            Critical security issues were found in the latest scan.
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Failed Scans:
            ${context.payload.needs.dependency-scan.result === 'failure' ? '- ‚ùå Dependency vulnerabilities found\n' : ''}
            ${context.payload.needs.sast-scan.result === 'failure' ? '- ‚ùå SAST issues detected\n' : ''}
            ${context.payload.needs.secret-scan.result === 'failure' ? '- ‚ùå Secrets found in code\n' : ''}
            
            Please review the security report and address these issues immediately.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['security', 'critical', 'automated'],
            });

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

  # Compliance checks
  compliance-check:
    name: Compliance Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security headers configuration
        run: |
          # Check for security headers in Next.js config
          if ! grep -q "securityHeaders" next.config.js; then
            echo "::warning::Security headers not configured in next.config.js"
          fi

      - name: Check for security.txt
        run: |
          if [ ! -f "public/.well-known/security.txt" ]; then
            echo "::warning::security.txt file not found"
          fi

      - name: Check environment variable usage
        run: |
          # Ensure no production secrets in code
          if grep -r "process.env" --include="*.ts" --include="*.tsx" src/ | grep -v "NEXT_PUBLIC_"; then
            echo "::warning::Non-public environment variables used in client-side code"
          fi

      - name: License compliance
        run: |
          npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense'