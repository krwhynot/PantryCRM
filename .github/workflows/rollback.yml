name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      target-version:
        description: 'Target version to rollback to (commit SHA or tag)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

permissions:
  contents: read
  deployments: write
  issues: write

env:
  NODE_VERSION: '20.x'

jobs:
  # Validate rollback request
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
      current-version: ${{ steps.current.outputs.version }}
      target-version: ${{ steps.target.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history

      - name: Validate inputs
        id: validate
        run: |
          # Check if user has permissions for production rollback
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "::warning::Production rollback requested by ${{ github.actor }}"
          fi
          
          # Validate target version if provided
          if [[ -n "${{ github.event.inputs.target-version }}" ]]; then
            if ! git rev-parse --verify "${{ github.event.inputs.target-version }}" >/dev/null 2>&1; then
              echo "::error::Invalid target version: ${{ github.event.inputs.target-version }}"
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "proceed=true" >> $GITHUB_OUTPUT

      - name: Get current deployed version
        id: current
        run: |
          # In a real scenario, this would query Azure or your deployment system
          # to get the currently deployed version
          echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Determine target version
        id: target
        run: |
          if [[ -n "${{ github.event.inputs.target-version }}" ]]; then
            TARGET="${{ github.event.inputs.target-version }}"
          else
            # Get the previous successful deployment
            TARGET=$(git rev-parse HEAD~1)
          fi
          echo "version=$TARGET" >> $GITHUB_OUTPUT
          
          # Show what will be rolled back
          echo "Current version: ${{ steps.current.outputs.version }}"
          echo "Target version: $TARGET"
          echo "Changes to be rolled back:"
          git log --oneline $TARGET..${{ steps.current.outputs.version }}

  # Create backup before rollback
  backup-current:
    name: Backup Current Deployment
    needs: validate-rollback
    if: needs.validate-rollback.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_CREDENTIALS_PRODUCTION || secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Create backup slot
        run: |
          APP_NAME=${{ github.event.inputs.environment == 'production' && secrets.AZURE_WEBAPP_NAME_PRODUCTION || secrets.AZURE_WEBAPP_NAME_STAGING }}
          RESOURCE_GROUP=${{ github.event.inputs.environment == 'production' && secrets.AZURE_RESOURCE_GROUP_PRODUCTION || secrets.AZURE_RESOURCE_GROUP_STAGING }}
          
          # Create a backup slot with current deployment
          az webapp deployment slot create \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --slot rollback-backup-$(date +%s) \
            --configuration-source $APP_NAME

      - name: Export database backup
        if: github.event.inputs.environment == 'production'
        run: |
          # Trigger database backup
          echo "Triggering database backup..."
          # This would use Azure Database backup or pg_dump

  # Execute rollback
  execute-rollback:
    name: Execute Rollback
    needs: [validate-rollback, backup-current]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}-rollback
    
    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --production=false

      - name: Build application
        run: |
          npm run build:azure
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: ${{ github.event.inputs.environment }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_CREDENTIALS_PRODUCTION || secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Deploy rollback version
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_WEBAPP_NAME_PRODUCTION || secrets.AZURE_WEBAPP_NAME_STAGING }}
          package: .
          
      - name: Run database migrations rollback
        if: github.event.inputs.environment == 'production'
        run: |
          echo "Rolling back database migrations if needed..."
          # npx prisma migrate resolve --rolled-back
          # Or custom rollback scripts

      - name: Validate rollback
        run: |
          APP_URL=${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}
          
          # Wait for deployment to stabilize
          sleep 30
          
          # Health check
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/api/health")
            if [ "$response" == "200" ]; then
              echo "Rollback successful - health check passed"
              break
            fi
            if [ "$i" == "5" ]; then
              echo "::error::Rollback validation failed"
              exit 1
            fi
            sleep 10
          done

      - name: Clear CDN cache
        if: github.event.inputs.environment == 'production'
        run: |
          az cdn endpoint purge \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --name ${{ secrets.AZURE_CDN_ENDPOINT }} \
            --profile-name ${{ secrets.AZURE_CDN_PROFILE }} \
            --content-paths "/*"

  # Post-rollback tasks
  post-rollback:
    name: Post-Rollback Tasks
    needs: [validate-rollback, execute-rollback]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.validate-rollback.outputs.target-version }}',
              environment: '${{ github.event.inputs.environment }}',
              description: `Rollback from ${{ needs.validate-rollback.outputs.current-version }}`,
              task: 'rollback',
              auto_merge: false,
              required_contexts: [],
              production_environment: '${{ github.event.inputs.environment }}' === 'production'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ needs.execute-rollback.result }}' === 'success' ? 'success' : 'failure',
              description: 'Rollback ${{ needs.execute-rollback.result }}'
            });

      - name: Create incident report
        if: needs.execute-rollback.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `## 🔄 Rollback Executed
            
            ### Details
            - **Environment**: ${{ github.event.inputs.environment }}
            - **Rolled back from**: \`${{ needs.validate-rollback.outputs.current-version }}\`
            - **Rolled back to**: \`${{ needs.validate-rollback.outputs.target-version }}\`
            - **Initiated by**: @${{ github.actor }}
            - **Reason**: ${{ github.event.inputs.reason }}
            
            ### Timeline
            - Rollback initiated: ${{ github.event.repository.updated_at }}
            - Rollback completed: ${new Date().toISOString()}
            
            ### Next Steps
            1. Investigate the issue that caused the rollback
            2. Create a fix in a new branch
            3. Test thoroughly before attempting to redeploy
            4. Document lessons learned
            
            ### Related Information
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Compare Changes](https://github.com/${{ github.repository }}/compare/${{ needs.validate-rollback.outputs.target-version }}...${{ needs.validate-rollback.outputs.current-version }})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Rollback: ${{ github.event.inputs.environment }} - ${{ github.event.inputs.reason }}`,
              body: issueBody,
              labels: ['incident', 'rollback', '${{ github.event.inputs.environment }}'],
              assignees: ['${{ github.actor }}']
            });

      - name: Send notifications
        if: always()
        run: |
          # Send notifications to team
          # This could integrate with Slack, Teams, PagerDuty, etc.
          echo "Rollback notification would be sent here"
          
          NOTIFICATION_TITLE="${{ needs.execute-rollback.result == 'success' && '✅ Rollback Successful' || '❌ Rollback Failed' }}"
          NOTIFICATION_BODY="Environment: ${{ github.event.inputs.environment }}\nReason: ${{ github.event.inputs.reason }}\nStatus: ${{ needs.execute-rollback.result }}"
          
          # Example: Send to Slack webhook
          # curl -X POST -H 'Content-type: application/json' \
          #   --data "{\"text\":\"$NOTIFICATION_TITLE\n$NOTIFICATION_BODY\"}" \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup failed rollback
  cleanup-failed-rollback:
    name: Cleanup Failed Rollback
    needs: [execute-rollback]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.environment == 'production' && secrets.AZURE_CREDENTIALS_PRODUCTION || secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Restore from backup
        run: |
          APP_NAME=${{ github.event.inputs.environment == 'production' && secrets.AZURE_WEBAPP_NAME_PRODUCTION || secrets.AZURE_WEBAPP_NAME_STAGING }}
          RESOURCE_GROUP=${{ github.event.inputs.environment == 'production' && secrets.AZURE_RESOURCE_GROUP_PRODUCTION || secrets.AZURE_RESOURCE_GROUP_STAGING }}
          
          # Get the most recent backup slot
          BACKUP_SLOT=$(az webapp deployment slot list \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "[?contains(name, 'rollback-backup-')].name | [0]" -o tsv)
          
          if [ -n "$BACKUP_SLOT" ]; then
            echo "Restoring from backup slot: $BACKUP_SLOT"
            az webapp deployment slot swap \
              --name $APP_NAME \
              --resource-group $RESOURCE_GROUP \
              --slot $BACKUP_SLOT \
              --target-slot production
          else
            echo "::error::No backup slot found for restoration"
          fi

      - name: Escalate incident
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 CRITICAL: Rollback Failed - ${{ github.event.inputs.environment }}`,
              body: `## Critical Incident
              
              The rollback procedure has failed and requires immediate attention.
              
              **Environment**: ${{ github.event.inputs.environment }}
              **Failed Rollback Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ### Immediate Actions Required
              1. Check application health status
              2. Review rollback logs
              3. Consider manual intervention
              4. Notify on-call team
              
              @${{ github.actor }} - Please respond immediately.`,
              labels: ['critical', 'incident', 'rollback-failed'],
            });