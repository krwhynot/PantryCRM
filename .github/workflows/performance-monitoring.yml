name: üîç Azure Performance Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      capture_hours:
        description: 'Hours of metrics to capture'
        required: false
        default: '24'
      send_alerts:
        description: 'Send performance alerts if thresholds exceeded'
        type: boolean
        default: true

env:
  AZURE_SUBSCRIPTION_ID: df8fefaa-16a0-47da-ace7-6eab8b1919cf
  AZURE_RESOURCE_GROUP: kitchen-pantry-crm-rg
  AZURE_TENANT_ID: 1018280e-f485-43e4-911a-b1140fcd1f1f
  
jobs:
  performance-monitoring:
    runs-on: ubuntu-latest
    name: üìä Capture Performance Baseline
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîê Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üìä Capture Performance Metrics
      id: metrics
      run: |
        # Set variables
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        HOURS="${{ github.event.inputs.capture_hours || '24' }}"
        
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "hours=$HOURS" >> $GITHUB_OUTPUT
        
        # Create performance directory
        mkdir -p performance_baselines/github-actions
        
        # Run performance baseline script
        chmod +x scripts/capture-performance-baseline-working.sh
        
        # Modify script to use GitHub environment
        sed -i "s/date -u -d '24 hours ago'/date -u -d '$HOURS hours ago'/g" scripts/capture-performance-baseline-working.sh
        sed -i "s/performance_baselines/performance_baselines\/github-actions/g" scripts/capture-performance-baseline-working.sh
        
        ./scripts/capture-performance-baseline-working.sh
        
        # Extract key metrics for alerts
        BASELINE_FILE="performance_baselines/github-actions/perf-baseline-$TIMESTAMP.json"
        
        if [ -f "$BASELINE_FILE" ]; then
          CPU_TIME=$(jq -r '.summary.currentCpuTime // "0"' "$BASELINE_FILE")
          DTU_PERCENT=$(jq -r '.summary.currentDtuPercent // "0"' "$BASELINE_FILE")
          
          echo "cpu_time=$CPU_TIME" >> $GITHUB_OUTPUT
          echo "dtu_percent=$DTU_PERCENT" >> $GITHUB_OUTPUT
          echo "baseline_file=$BASELINE_FILE" >> $GITHUB_OUTPUT
        fi
        
    - name: üö® Performance Alert Check
      if: github.event.inputs.send_alerts == 'true' || github.event_name == 'schedule'
      run: |
        CPU_TIME="${{ steps.metrics.outputs.cpu_time }}"
        DTU_PERCENT="${{ steps.metrics.outputs.dtu_percent }}"
        
        # Performance thresholds
        CPU_THRESHOLD=300  # seconds
        DTU_THRESHOLD=80   # percentage
        
        ALERTS=""
        
        # Check CPU time (Basic tier should stay low)
        if (( $(echo "$CPU_TIME > $CPU_THRESHOLD" | bc -l) )); then
          ALERTS="$ALERTS\n‚ö†Ô∏è HIGH CPU: $CPU_TIME seconds (threshold: $CPU_THRESHOLD)"
        fi
        
        # Check DTU percentage (Basic tier 5 DTU limit)
        if (( $(echo "$DTU_PERCENT > $DTU_THRESHOLD" | bc -l) )); then
          ALERTS="$ALERTS\n‚ö†Ô∏è HIGH DTU: $DTU_PERCENT% (threshold: $DTU_THRESHOLD%)"
        fi
        
        if [ ! -z "$ALERTS" ]; then
          echo "PERFORMANCE_ALERTS<<EOF" >> $GITHUB_ENV
          echo -e "$ALERTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "has_alerts=true" >> $GITHUB_ENV
        else
          echo "‚úÖ All performance metrics within normal range" >> $GITHUB_STEP_SUMMARY
          echo "has_alerts=false" >> $GITHUB_ENV
        fi
        
    - name: üìà Generate Performance Report
      run: |
        TIMESTAMP="${{ steps.metrics.outputs.timestamp }}"
        BASELINE_FILE="${{ steps.metrics.outputs.baseline_file }}"
        
        # Create performance report
        cat > performance_baselines/github-actions/performance-report-$TIMESTAMP.md << EOF
        # üìä PantryCRM Performance Report
        
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
        **Workflow:** ${{ github.workflow }}  
        **Run ID:** ${{ github.run_id }}
        
        ## üìã Resource Summary
        - **App Service:** kitchen-pantry-crm.azurewebsites.net
        - **SQL Database:** Basic tier (5 DTU)
        - **Location:** Central US
        
        ## üìä Current Metrics
        - **CPU Time:** ${{ steps.metrics.outputs.cpu_time }} seconds
        - **DTU Usage:** ${{ steps.metrics.outputs.dtu_percent }}%
        
        ## üéØ Performance Status
        $(if [ "${{ env.has_alerts }}" = "true" ]; then
          echo "${{ env.PERFORMANCE_ALERTS }}"
        else
          echo "‚úÖ All systems operating within normal parameters"
        fi)
        
        ## üìÇ Captured Data
        - Baseline file: \`$BASELINE_FILE\`
        - App Service metrics: ‚úÖ Captured
        - SQL Database metrics: ‚úÖ Captured  
        - Resource configuration: ‚úÖ Captured
        
        ## üîó Useful Links
        - [Azure Portal](https://portal.azure.com/#@1018280e-f485-43e4-911a-b1140fcd1f1f/resource/subscriptions/df8fefaa-16a0-47da-ace7-6eab8b1919cf/resourceGroups/kitchen-pantry-crm-rg/overview)
        - [App Service](https://portal.azure.com/#@1018280e-f485-43e4-911a-b1140fcd1f1f/resource/subscriptions/df8fefaa-16a0-47da-ace7-6eab8b1919cf/resourceGroups/kitchen-pantry-crm-rg/providers/Microsoft.Web/sites/kitchen-pantry-crm/appServices)
        - [SQL Database](https://portal.azure.com/#@1018280e-f485-43e4-911a-b1140fcd1f1f/resource/subscriptions/df8fefaa-16a0-47da-ace7-6eab8b1919cf/resourceGroups/kitchen-pantry-crm-rg/providers/Microsoft.Sql/servers/kitchen-pantry-crm-sql/databases/kitchen-pantry-crm-db/overview)
        EOF
        
        # Add to step summary
        cat performance_baselines/github-actions/performance-report-$TIMESTAMP.md >> $GITHUB_STEP_SUMMARY
        
    - name: üíæ Archive Performance Data
      uses: actions/upload-artifact@v4
      with:
        name: performance-baseline-${{ steps.metrics.outputs.timestamp }}
        path: performance_baselines/github-actions/
        retention-days: 30
        
    - name: üîî Teams/Slack Notification (Optional)
      if: env.has_alerts == 'true' && vars.TEAMS_WEBHOOK_URL != ''
      run: |
        curl -H "Content-Type: application/json" -d '{
          "text": "üö® PantryCRM Performance Alert",
          "sections": [{
            "activityTitle": "Performance Monitoring Alert",
            "activitySubtitle": "Thresholds exceeded on ${{ github.sha }}",
            "facts": [
              {"name": "CPU Time", "value": "${{ steps.metrics.outputs.cpu_time }} seconds"},
              {"name": "DTU Usage", "value": "${{ steps.metrics.outputs.dtu_percent }}%"},
              {"name": "Workflow", "value": "${{ github.workflow }}"},
              {"name": "Run ID", "value": "${{ github.run_id }}"}
            ]
          }]
        }' "${{ vars.TEAMS_WEBHOOK_URL }}"

  performance-trend-analysis:
    needs: performance-monitoring
    runs-on: ubuntu-latest
    name: üìà Trend Analysis
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üìä Download Recent Performance Data
      uses: actions/download-artifact@v4
      with:
        pattern: performance-baseline-*
        path: trend-analysis/
        merge-multiple: true
        
    - name: üìà Generate Trend Report
      run: |
        # Create trend analysis directory
        mkdir -p trend-analysis/reports
        
        # Simple trend analysis script
        cat > trend-analysis/analyze-trends.py << 'EOF'
        import json
        import glob
        import datetime
        from statistics import mean
        
        # Find all baseline files
        baseline_files = glob.glob('trend-analysis/**/perf-baseline-*.json', recursive=True)
        baseline_files.sort()
        
        metrics_data = []
        for file in baseline_files[-10:]:  # Last 10 runs
            try:
                with open(file, 'r') as f:
                    data = json.load(f)
                    metrics_data.append({
                        'timestamp': data.get('timestamp'),
                        'cpu_time': float(data.get('summary', {}).get('currentCpuTime', 0)),
                        'dtu_percent': float(data.get('summary', {}).get('currentDtuPercent', 0))
                    })
            except Exception as e:
                print(f"Error processing {file}: {e}")
        
        if metrics_data:
            avg_cpu = mean([m['cpu_time'] for m in metrics_data])
            avg_dtu = mean([m['dtu_percent'] for m in metrics_data])
            
            print(f"üìä Performance Trends (Last {len(metrics_data)} runs)")
            print(f"Average CPU Time: {avg_cpu:.2f} seconds")
            print(f"Average DTU Usage: {avg_dtu:.2f}%")
            
            # Write trend report
            with open('trend-analysis/reports/trend-summary.json', 'w') as f:
                json.dump({
                    'analysis_date': datetime.datetime.utcnow().isoformat(),
                    'samples': len(metrics_data),
                    'averages': {
                        'cpu_time': avg_cpu,
                        'dtu_percent': avg_dtu
                    },
                    'recent_data': metrics_data
                }, f, indent=2)
        EOF
        
        python3 trend-analysis/analyze-trends.py
        
    - name: üíæ Archive Trend Analysis
      uses: actions/upload-artifact@v4
      with:
        name: performance-trends-${{ github.run_id }}
        path: trend-analysis/reports/
        retention-days: 90