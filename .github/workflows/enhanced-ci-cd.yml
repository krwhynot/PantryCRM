# Enhanced CI/CD Pipeline with Comprehensive Testing
# Optimized for Azure B1 tier with extensive validation
name: "üöÄ Enhanced CI/CD Pipeline"

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.vscode/**'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.environment || 'ci' }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Global environment variables
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  AZURE_WEBAPP_NAME: 'pantry-crm-prod'
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NEXT_TELEMETRY_DISABLED: 1
  FORCE_COLOR: 3
  HUSKY: 0
  # Performance optimization for Azure B1
  NODE_OPTIONS: '--max-old-space-size=1536'
  # Artifact retention
  ARTIFACT_RETENTION_DAYS: 7
  # Coverage thresholds
  COVERAGE_THRESHOLD_GLOBAL: 80
  COVERAGE_THRESHOLD_CRITICAL: 90

permissions:
  contents: read
  actions: read
  checks: write
  issues: write
  pull-requests: write
  security-events: write
  deployments: write
  id-token: write

jobs:
  # =====================================================================
  # PHASE 1: BUILD AND TEST PIPELINE VALIDATION
  # =====================================================================
  
  validate-pipeline:
    name: "üîç Validate Pipeline"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      should_deploy: ${{ steps.deployment_check.outputs.should_deploy }}
      affected_packages: ${{ steps.affected.outputs.packages }}
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "üîß Setup Pipeline Tools"
        run: |
          # Install yamllint for YAML validation
          pip install yamllint
          
          # Install actionlint for GitHub Actions validation
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          sudo mv actionlint /usr/local/bin/
          
      - name: "üìã Validate Workflow Syntax"
        run: |
          echo "Validating workflow YAML files..."
          yamllint .github/workflows/*.yml -d "{extends: default, rules: {line-length: {max: 150}}}"
          
          echo "Validating GitHub Actions syntax..."
          actionlint
          
      - name: "üîç Check Affected Files"
        id: affected
        run: |
          # Determine what changed to optimize testing
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}...${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1...HEAD)
          
          # Check if deployment is needed
          if echo "$CHANGED_FILES" | grep -qE "(src/|app/|pages/|components/|lib/|prisma/|package\.json|\.env|next\.config)"; then
            echo "packages=app" >> $GITHUB_OUTPUT
          else
            echo "packages=none" >> $GITHUB_OUTPUT
          fi
          
      - name: "üö¶ Deployment Check"
        id: deployment_check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # =====================================================================
  # BUILD MATRIX TESTING
  # =====================================================================
  
  build-matrix:
    name: "üî® Build Matrix"
    needs: validate-pipeline
    if: needs.validate-pipeline.outputs.affected_packages != 'none'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: ['18.x', '20.x', 'latest']
        include:
          - node-version: '18.x'
            node-label: 'LTS-18'
          - node-version: '20.x'
            node-label: 'LTS-20'
          - node-version: 'latest'
            node-label: 'Latest'
    
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        
      - name: "‚öôÔ∏è Setup Node.js ${{ matrix.node-label }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: "üì¶ Cache Dependencies"
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            
      - name: "üì• Install Dependencies"
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm ci --legacy-peer-deps --prefer-offline --no-audit
          npm ls --depth=0 || true
          
      - name: "üóÑÔ∏è Generate Prisma Client"
        run: npx prisma generate
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          
      - name: "üîç Type Check"
        run: npm run typecheck
        
      - name: "üèóÔ∏è Build Application"
        run: npm run build:azure
        env:
          NODE_ENV: production
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          JWT_SECRET: "dummy-secret"
          NEXTAUTH_SECRET: "dummy-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          
      - name: "üìä Bundle Size Check"
        run: |
          # Check bundle sizes
          echo "Checking bundle sizes..."
          find .next -name "*.js" -size +500k -exec ls -lh {} \; | head -20
          
          # Total size check
          TOTAL_SIZE=$(du -sh .next | awk '{print $1}')
          echo "Total build size: $TOTAL_SIZE"
          
      - name: "üíæ Upload Build Artifacts"
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # =====================================================================
  # COMPREHENSIVE TESTING
  # =====================================================================
  
  test-suite:
    name: "üß™ Test Suite"
    needs: validate-pipeline
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: pantrycrm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        
      - name: "‚öôÔ∏è Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "üì¶ Install Dependencies"
        run: npm ci --legacy-peer-deps
        
      - name: "üóÑÔ∏è Setup Test Database"
        run: |
          npx prisma generate
          npx prisma db push --skip-seed
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/pantrycrm_test"
          
      - name: "üß™ Run Unit Tests"
        run: npm run test:ci
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://test:test@localhost:5432/pantrycrm_test"
          JWT_SECRET: "test-secret"
          
      - name: "üìä Coverage Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          
      - name: "üìà Coverage Check"
        run: |
          # Extract coverage percentages
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Total coverage: ${COVERAGE}%"
          
          # Check against threshold
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD_GLOBAL" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD_GLOBAL}%"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD_GLOBAL}%"
          fi
          
      - name: "üé≠ Setup Playwright"
        run: npx playwright install --with-deps chromium
        
      - name: "üé≠ Run E2E Tests"
        run: npm run test:e2e
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/pantrycrm_test"
          NEXTAUTH_URL: "http://localhost:3000"
          NEXTAUTH_SECRET: "test-secret"
          JWT_SECRET: "test-secret"
          
      - name: "üìä E2E Test Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # =====================================================================
  # PERFORMANCE TESTING
  # =====================================================================
  
  performance-test:
    name: "‚ö° Performance Testing"
    needs: [build-matrix]
    runs-on: ubuntu-latest
    
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        
      - name: "‚öôÔ∏è Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: "üì• Download Build"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          
      - name: "üì¶ Install Dependencies"
        run: npm ci --production --legacy-peer-deps
        
      - name: "üöÄ Start Application"
        run: |
          npm run start &
          sleep 30
        env:
          PORT: 3000
          NODE_ENV: production
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          
      - name: "‚ö° Memory Usage Test"
        run: |
          # Monitor memory usage
          echo "Testing memory usage..."
          npm run test:performance:memory
          
          # Check if memory stays under Azure B1 limit (1.75GB)
          MAX_MEMORY=$(cat performance-results/memory-usage.json | jq '.maxMemoryMB')
          if (( $(echo "$MAX_MEMORY > 1536" | bc -l) )); then
            echo "‚ùå Memory usage ${MAX_MEMORY}MB exceeds Azure B1 limit"
            exit 1
          else
            echo "‚úÖ Memory usage ${MAX_MEMORY}MB is within limits"
          fi
          
      - name: "üîç Lighthouse CI"
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.github/lighthouse/lighthouserc.json || true
          
      - name: "üìä Performance Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            performance-results/
            .lighthouseci/
          retention-days: 7

  # =====================================================================
  # PHASE 2: SECURITY SCANNING
  # =====================================================================
  
  security-scan:
    name: "üîí Security Scanning"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "üîç Initialize CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          config-file: ./.github/codeql/codeql-config.yml
          
      - name: "üèóÔ∏è Autobuild"
        uses: github/codeql-action/autobuild@v3
        
      - name: "üî¨ Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          
      - name: "üõ°Ô∏è Dependency Scan"
        run: |
          npm audit --production --audit-level=moderate
          
      - name: "üîê Secret Scanning"
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: "üìã License Check"
        run: |
          npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense' || true

  # =====================================================================
  # PHASE 3: DEPLOYMENT VALIDATION
  # =====================================================================
  
  validate-deployment:
    name: "üöÄ Validate Deployment"
    needs: [build-matrix, test-suite, security-scan]
    if: needs.validate-pipeline.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: "üì• Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          
      - name: "üîê Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: "üîç Pre-deployment Validation"
        run: |
          echo "Validating deployment package..."
          
          # Check package size
          PACKAGE_SIZE=$(du -sh . | awk '{print $1}')
          echo "Package size: $PACKAGE_SIZE"
          
          # Validate required files
          for file in package.json next.config.js .next/BUILD_ID; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ Deployment package validated"
          
      - name: "üé≠ Deploy to Staging Slot"
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: staging
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          
      - name: "‚ù§Ô∏è Health Check"
        run: |
          echo "Performing health check..."
          
          # Wait for deployment
          sleep 60
          
          # Health check
          for i in {1..5}; do
            if curl -f "https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/api/health"; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Attempt $i failed, retrying..."
              sleep 30
            fi
          done
          
      - name: "üß™ Smoke Tests"
        run: |
          echo "Running smoke tests..."
          
          # Test critical endpoints
          ENDPOINTS=(
            "/"
            "/api/health"
            "/api/auth/providers"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing $endpoint..."
            curl -f "https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net$endpoint" || exit 1
          done
          
          echo "‚úÖ All smoke tests passed"

  # =====================================================================
  # WORKFLOW STATUS REPORTER
  # =====================================================================
  
  workflow-status:
    name: "üìä Workflow Status"
    if: always()
    needs: [validate-pipeline, build-matrix, test-suite, performance-test, security-scan]
    runs-on: ubuntu-latest
    
    steps:
      - name: "üìä Generate Status Report"
        run: |
          echo "## üìä Workflow Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline validation
          if [[ "${{ needs.validate-pipeline.result }}" == "success" ]]; then
            echo "‚úÖ Pipeline Validation: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Pipeline Validation: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build matrix
          if [[ "${{ needs.build-matrix.result }}" == "success" ]]; then
            echo "‚úÖ Build Matrix: All versions passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Build Matrix: Some versions failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test suite
          if [[ "${{ needs.test-suite.result }}" == "success" ]]; then
            echo "‚úÖ Test Suite: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Test Suite: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance
          if [[ "${{ needs.performance-test.result }}" == "success" ]]; then
            echo "‚úÖ Performance: Within thresholds" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Performance: Outside thresholds" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ Security: No critical issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Security: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Summary" >> $GITHUB_STEP_SUMMARY
          echo "Workflow completed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          
      - name: "üí¨ Comment on PR"
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const statusEmoji = {
              success: '‚úÖ',
              failure: '‚ùå',
              cancelled: '‚ö†Ô∏è',
              skipped: '‚è≠Ô∏è'
            };
            
            const results = {
              'Pipeline Validation': '${{ needs.validate-pipeline.result }}',
              'Build Matrix': '${{ needs.build-matrix.result }}',
              'Test Suite': '${{ needs.test-suite.result }}',
              'Performance Test': '${{ needs.performance-test.result }}',
              'Security Scan': '${{ needs.security-scan.result }}'
            };
            
            let comment = '## ü§ñ CI/CD Pipeline Results\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            
            for (const [check, result] of Object.entries(results)) {
              const emoji = statusEmoji[result] || '‚ùì';
              comment += `| ${check} | ${emoji} ${result} |\n`;
            }
            
            comment += '\n';
            comment += `üîó [View Full Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            comment += `üìÖ Run at: ${new Date().toUTCString()}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });