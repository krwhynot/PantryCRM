name: Scheduled Maintenance

on:
  schedule:
    # Run dependency updates weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
    # Run performance benchmarks daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        type: choice
        options:
          - dependency-update
          - performance-benchmark
          - cleanup
          - all

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'

jobs:
  # Dependency updates
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' && contains(github.event.schedule, '0 2 * * 0') ||
      github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'dependency-update' || github.event.inputs.task == 'all')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated packages
        id: check-outdated
        run: |
          npm outdated --json > outdated.json || true
          OUTDATED_COUNT=$(cat outdated.json | jq 'length')
          echo "outdated-count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "Found $OUTDATED_COUNT outdated packages"
            cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) → \(.value.wanted) (latest: \(.value.latest))"'
          fi

      - name: Update dependencies
        if: steps.check-outdated.outputs.outdated-count > 0
        run: |
          # Update to wanted versions (respecting semver)
          npm update
          
          # Update packages that have new major versions available
          npx npm-check-updates -u --target minor
          npm install --legacy-peer-deps

      - name: Run tests after update
        if: steps.check-outdated.outputs.outdated-count > 0
        run: |
          npm run test:ci
          npm run typecheck
          npm run lint

      - name: Create pull request
        if: steps.check-outdated.outputs.outdated-count > 0
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update dependencies'
          title: '🔧 Weekly Dependency Updates'
          body: |
            ## Weekly Dependency Updates
            
            This PR contains automated dependency updates performed by the scheduled maintenance workflow.
            
            ### Changes
            - Updated npm dependencies to their latest minor/patch versions
            - All tests have been run and passed
            
            ### Review Checklist
            - [ ] Review the updated dependencies for any breaking changes
            - [ ] Check that all tests are passing
            - [ ] Verify the application builds successfully
            - [ ] Test critical user journeys in staging after merge
            
            ---
            _This PR was automatically created by the maintenance workflow._
          branch: deps/weekly-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated

  # Performance benchmarking
  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' && contains(github.event.schedule, '0 4 * * *') ||
      github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'performance-benchmark' || github.event.inputs.task == 'all')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          sleep 15  # Wait for server to start

      - name: Run performance tests
        id: perf-test
        run: |
          # Install performance testing tools
          npm install -g lighthouse autocannon
          
          # Run Lighthouse performance audit
          lighthouse http://localhost:3000 \
            --output=json \
            --output-path=./lighthouse-report.json \
            --only-categories=performance \
            --chrome-flags="--headless"
          
          # Extract key metrics
          PERF_SCORE=$(cat lighthouse-report.json | jq '.categories.performance.score * 100')
          FCP=$(cat lighthouse-report.json | jq '.audits["first-contentful-paint"].numericValue')
          LCP=$(cat lighthouse-report.json | jq '.audits["largest-contentful-paint"].numericValue')
          TTI=$(cat lighthouse-report.json | jq '.audits["interactive"].numericValue')
          
          echo "performance-score=$PERF_SCORE" >> $GITHUB_OUTPUT
          echo "fcp=$FCP" >> $GITHUB_OUTPUT
          echo "lcp=$LCP" >> $GITHUB_OUTPUT
          echo "tti=$TTI" >> $GITHUB_OUTPUT
          
          # Run load testing
          autocannon -c 100 -d 60 -p 10 http://localhost:3000 --json > load-test-results.json
          
          # Extract load test metrics
          RPS=$(cat load-test-results.json | jq '.requests.average')
          LATENCY_P99=$(cat load-test-results.json | jq '.latency.p99')
          
          echo "rps=$RPS" >> $GITHUB_OUTPUT
          echo "latency-p99=$LATENCY_P99" >> $GITHUB_OUTPUT

      - name: Compare with baseline
        id: compare
        run: |
          # Load baseline metrics (stored in repository)
          if [ -f ".github/performance-baseline.json" ]; then
            BASELINE_SCORE=$(cat .github/performance-baseline.json | jq '.performance_score')
            CURRENT_SCORE=${{ steps.perf-test.outputs.performance-score }}
            
            DIFF=$(echo "$CURRENT_SCORE - $BASELINE_SCORE" | bc)
            echo "score-diff=$DIFF" >> $GITHUB_OUTPUT
            
            if (( $(echo "$DIFF < -5" | bc -l) )); then
              echo "::warning::Performance score decreased by $DIFF points"
              echo "regression=true" >> $GITHUB_OUTPUT
            else
              echo "regression=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Update baseline
        if: github.ref == 'refs/heads/main'
        run: |
          # Update baseline metrics for main branch
          cat > .github/performance-baseline.json << EOF
          {
            "performance_score": ${{ steps.perf-test.outputs.performance-score }},
            "fcp": ${{ steps.perf-test.outputs.fcp }},
            "lcp": ${{ steps.perf-test.outputs.lcp }},
            "tti": ${{ steps.perf-test.outputs.tti }},
            "rps": ${{ steps.perf-test.outputs.rps }},
            "latency_p99": ${{ steps.perf-test.outputs.latency-p99 }},
            "updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Create issue if regression detected
        if: steps.compare.outputs.regression == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Performance Regression Detected',
              body: `## Performance Regression Alert
              
              The daily performance benchmark has detected a regression in application performance.
              
              ### Metrics
              - **Performance Score**: ${{ steps.perf-test.outputs.performance-score }}% (decreased by ${{ steps.compare.outputs.score-diff }} points)
              - **First Contentful Paint**: ${{ steps.perf-test.outputs.fcp }}ms
              - **Largest Contentful Paint**: ${{ steps.perf-test.outputs.lcp }}ms
              - **Time to Interactive**: ${{ steps.perf-test.outputs.tti }}ms
              - **Requests/sec**: ${{ steps.perf-test.outputs.rps }}
              - **P99 Latency**: ${{ steps.perf-test.outputs.latency-p99 }}ms
              
              Please investigate recent changes that may have impacted performance.
              
              [View Full Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`,
              labels: ['performance', 'regression', 'automated'],
            });

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            lighthouse-report.json
            load-test-results.json

  # Cleanup old resources
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PRODUCTION }}

      - name: Cleanup old deployment slots
        run: |
          # List all deployment slots
          SLOTS=$(az webapp deployment slot list \
            --name ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
            --query "[?contains(name, 'backup-')].name" -o tsv)
          
          # Keep only the 3 most recent backup slots
          if [ -n "$SLOTS" ]; then
            SLOTS_TO_DELETE=$(echo "$SLOTS" | sort -r | tail -n +4)
            for slot in $SLOTS_TO_DELETE; do
              echo "Deleting old backup slot: $slot"
              az webapp deployment slot delete \
                --name ${{ secrets.AZURE_WEBAPP_NAME_PRODUCTION }} \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
                --slot "$slot"
            done
          fi

      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Delete artifacts older than 30 days
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }

      - name: Cleanup Docker images
        if: hashFiles('Dockerfile') != ''
        run: |
          # Remove unused Docker images
          docker system prune -a -f --volumes
          
          # If using Azure Container Registry, cleanup old images
          # az acr repository delete --name $ACR_NAME --image $IMAGE_NAME:old-tag

      - name: Database maintenance
        run: |
          # Run database optimization queries
          echo "Running database maintenance tasks..."
          # This would connect to your database and run:
          # - VACUUM (for PostgreSQL)
          # - Analyze tables
          # - Clean up old sessions
          # - Archive old data

  # Security patching
  security-patch:
    name: Apply Security Patches
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for security updates
        run: |
          # Run npm audit and attempt to fix
          npm audit fix --force
          
          # Check if any changes were made
          if [[ -n $(git status --porcelain) ]]; then
            echo "Security patches applied"
            echo "patches-applied=true" >> $GITHUB_OUTPUT
          else
            echo "No security patches needed"
            echo "patches-applied=false" >> $GITHUB_OUTPUT
          fi

      - name: Create security patch PR
        if: steps.check.outputs.patches-applied == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'security: apply automated security patches'
          title: '🔒 Automated Security Patches'
          body: |
            ## Security Patches
            
            This PR contains automated security patches applied by npm audit fix.
            
            ⚠️ **Important**: Please review these changes carefully as `--force` was used.
            
            ### Review Checklist
            - [ ] Review all dependency changes
            - [ ] Run full test suite
            - [ ] Test application functionality
            - [ ] Deploy to staging first
            
            ---
            _This PR was automatically created by the security maintenance workflow._
          branch: security/automated-patches-${{ github.run_number }}
          labels: |
            security
            automated
            high-priority

  # Generate maintenance report
  maintenance-report:
    name: Generate Maintenance Report
    runs-on: ubuntu-latest
    needs: [dependency-update, performance-benchmark, cleanup]
    if: always()
    
    steps:
      - name: Generate report
        run: |
          cat > maintenance-report.md << EOF
          # Maintenance Report
          
          **Date**: $(date)
          **Workflow Run**: ${{ github.run_id }}
          
          ## Summary
          
          | Task | Status |
          |------|--------|
          | Dependency Updates | ${{ needs.dependency-update.result }} |
          | Performance Benchmark | ${{ needs.performance-benchmark.result }} |
          | Cleanup | ${{ needs.cleanup.result }} |
          
          ## Next Scheduled Runs
          - Dependency Updates: Next Sunday at 2 AM UTC
          - Performance Benchmark: Tomorrow at 4 AM UTC
          
          EOF

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: maintenance-report
          path: maintenance-report.md