# Azure App Service Deployment - Kitchen Pantry CRM
# This workflow deploys the Food Service CRM to Azure App Service
# Target: Azure App Service (B1 Basic tier - $13/month)

name: Deploy to Azure App Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: 'kitchen-pantry-crm'    # Replace with your actual app name
  AZURE_WEBAPP_PACKAGE_PATH: '.'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npx tsc --noEmit --skipLibCheck
      continue-on-error: true  # Allow deployment even with TS errors (for now)

    - name: Run tests
      run: npm run test:ci

    - name: Run linting
      run: npm run lint
      continue-on-error: true  # Allow deployment even with lint errors (for now)

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Build Next.js application
      run: npm run build:azure
      env:
        # Build-time environment variables
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
        # Database URL is handled at runtime, not build time
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          node_modules/
          package.json
          package-lock.json
          prisma/
          public/
          next.config.js
          !node_modules/.cache
          !node_modules/@types
        retention-days: 1

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: production

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: Setup Node.js for deployment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        startup-command: 'npm run start:azure'

    - name: Run database migrations
      uses: azure/CLI@v1
      with:
        azcliversion: 2.45.0
        inlineScript: |
          # Install Prisma CLI
          npm install -g prisma@latest
          
          # Run database migrations
          npx prisma migrate deploy
          
          # Seed database if needed (optional - only on first deployment)
          # npx prisma db seed
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health || echo "000")
        if [ $response -eq 200 ]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed with status: $response"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üöÄ Deployment successful! App is running at: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        else
          echo "‚ùå Deployment failed. Check the logs for details."
        fi