name: "🎭 Workflow Orchestration Testing"

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        type: choice
        options:
          - all
          - job-dependencies
          - conditional-execution
          - parallel-execution
          - timeout-cancellation
          - artifact-sharing
          - workflow-dispatch
          - concurrency-control
      debug_mode:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  actions: write

env:
  TEST_ARTIFACT_NAME: orchestration-test-artifact
  PARALLEL_JOBS: 4
  MAX_TIMEOUT: 300  # 5 minutes

jobs:
  # =====================================================================
  # JOB DEPENDENCIES TESTING
  # =====================================================================
  
  dependency-test-1:
    name: "1️⃣ Dependency Test - First Job"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'job-dependencies'
    outputs:
      job1_output: ${{ steps.set_output.outputs.value }}
      timestamp: ${{ steps.set_output.outputs.timestamp }}
      
    steps:
      - name: "🎯 Execute First Job"
        id: set_output
        run: |
          echo "Executing first job in dependency chain..."
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          echo "value=job1-completed-$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          
          # Simulate work
          sleep 5
          
          echo "✅ First job completed"
          
      - name: "📊 Job Summary"
        run: |
          echo "## Job 1 Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Output: ${{ steps.set_output.outputs.value }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: ${{ steps.set_output.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY

  dependency-test-2:
    name: "2️⃣ Dependency Test - Second Job"
    runs-on: ubuntu-latest
    needs: dependency-test-1
    if: success()
    outputs:
      combined_output: ${{ steps.combine.outputs.result }}
      
    steps:
      - name: "🎯 Use Previous Job Output"
        id: combine
        run: |
          echo "Received from Job 1: ${{ needs.dependency-test-1.outputs.job1_output }}"
          echo "Timestamp: ${{ needs.dependency-test-1.outputs.timestamp }}"
          
          COMBINED="job2-processed-${{ needs.dependency-test-1.outputs.job1_output }}"
          echo "result=$COMBINED" >> $GITHUB_OUTPUT
          
          # Simulate processing
          sleep 3
          
          echo "✅ Second job completed"
          
      - name: "💾 Create Test Artifact"
        run: |
          mkdir -p test-artifacts
          echo "${{ steps.combine.outputs.result }}" > test-artifacts/dependency-test.txt
          echo "Dependency chain completed at $(date -u)" >> test-artifacts/dependency-test.txt
          
      - name: "📤 Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: dependency-test-artifact
          path: test-artifacts/
          retention-days: 1

  dependency-test-3:
    name: "3️⃣ Dependency Test - Final Job"
    runs-on: ubuntu-latest
    needs: [dependency-test-1, dependency-test-2]
    if: |
      needs.dependency-test-1.result == 'success' &&
      needs.dependency-test-2.result == 'success'
      
    steps:
      - name: "🎯 Final Dependency Validation"
        run: |
          echo "Validating dependency chain..."
          echo "Job 1 Output: ${{ needs.dependency-test-1.outputs.job1_output }}"
          echo "Job 2 Output: ${{ needs.dependency-test-2.outputs.combined_output }}"
          
          if [[ -z "${{ needs.dependency-test-1.outputs.job1_output }}" ]]; then
            echo "❌ Job 1 output is missing"
            exit 1
          fi
          
          if [[ -z "${{ needs.dependency-test-2.outputs.combined_output }}" ]]; then
            echo "❌ Job 2 output is missing"
            exit 1
          fi
          
          echo "✅ All dependencies validated successfully"

  # =====================================================================
  # CONDITIONAL EXECUTION TESTING
  # =====================================================================
  
  conditional-setup:
    name: "🔀 Conditional - Setup"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'conditional-execution'
    outputs:
      should_run_a: ${{ steps.conditions.outputs.run_a }}
      should_run_b: ${{ steps.conditions.outputs.run_b }}
      matrix_size: ${{ steps.conditions.outputs.matrix }}
      
    steps:
      - name: "🎲 Set Random Conditions"
        id: conditions
        run: |
          # Generate random conditions
          RANDOM_A=$((RANDOM % 2))
          RANDOM_B=$((RANDOM % 2))
          MATRIX_SIZE=$((RANDOM % 3 + 1))
          
          echo "run_a=$([[ $RANDOM_A -eq 1 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "run_b=$([[ $RANDOM_B -eq 1 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "matrix=$MATRIX_SIZE" >> $GITHUB_OUTPUT
          
          echo "Conditions set:"
          echo "- Run A: $([[ $RANDOM_A -eq 1 ]] && echo 'true' || echo 'false')"
          echo "- Run B: $([[ $RANDOM_B -eq 1 ]] && echo 'true' || echo 'false')"
          echo "- Matrix Size: $MATRIX_SIZE"

  conditional-job-a:
    name: "🅰️ Conditional Job A"
    runs-on: ubuntu-latest
    needs: conditional-setup
    if: needs.conditional-setup.outputs.should_run_a == 'true'
    
    steps:
      - name: "✅ Job A Execution"
        run: |
          echo "Job A is running because condition was met"
          echo "## Conditional Job A" >> $GITHUB_STEP_SUMMARY
          echo "✅ Executed based on condition" >> $GITHUB_STEP_SUMMARY

  conditional-job-b:
    name: "🅱️ Conditional Job B"
    runs-on: ubuntu-latest
    needs: conditional-setup
    if: needs.conditional-setup.outputs.should_run_b == 'true'
    
    steps:
      - name: "✅ Job B Execution"
        run: |
          echo "Job B is running because condition was met"
          echo "## Conditional Job B" >> $GITHUB_STEP_SUMMARY
          echo "✅ Executed based on condition" >> $GITHUB_STEP_SUMMARY

  conditional-matrix:
    name: "🔢 Conditional Matrix [${{ matrix.index }}]"
    runs-on: ubuntu-latest
    needs: conditional-setup
    if: always()
    strategy:
      matrix:
        index: [1, 2, 3]
    
    steps:
      - name: "🎯 Matrix Execution"
        if: matrix.index <= fromJSON(needs.conditional-setup.outputs.matrix_size)
        run: |
          echo "Matrix job ${{ matrix.index }} running"
          echo "Matrix size limit: ${{ needs.conditional-setup.outputs.matrix_size }}"

  # =====================================================================
  # PARALLEL EXECUTION TESTING
  # =====================================================================
  
  parallel-coordinator:
    name: "🎯 Parallel Coordinator"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'parallel-execution'
    outputs:
      test_id: ${{ steps.setup.outputs.test_id }}
      
    steps:
      - name: "🎬 Setup Parallel Test"
        id: setup
        run: |
          TEST_ID="parallel-test-$(date +%s)"
          echo "test_id=$TEST_ID" >> $GITHUB_OUTPUT
          echo "Starting parallel execution test: $TEST_ID"

  parallel-worker:
    name: "👷 Worker ${{ matrix.worker_id }}"
    runs-on: ubuntu-latest
    needs: parallel-coordinator
    strategy:
      matrix:
        worker_id: [1, 2, 3, 4]
      max-parallel: 4
      
    steps:
      - name: "⚡ Parallel Work"
        run: |
          echo "Worker ${{ matrix.worker_id }} starting..."
          
          # Simulate different workloads
          SLEEP_TIME=$((RANDOM % 10 + 5))
          echo "Worker ${{ matrix.worker_id }} working for ${SLEEP_TIME}s..."
          sleep $SLEEP_TIME
          
          echo "Worker ${{ matrix.worker_id }} completed!"
          
      - name: "💾 Create Worker Output"
        run: |
          mkdir -p worker-output
          echo "Worker ${{ matrix.worker_id }} output" > worker-output/worker-${{ matrix.worker_id }}.txt
          echo "Test ID: ${{ needs.parallel-coordinator.outputs.test_id }}" >> worker-output/worker-${{ matrix.worker_id }}.txt
          echo "Completed at: $(date -u)" >> worker-output/worker-${{ matrix.worker_id }}.txt
          
      - name: "📤 Upload Worker Result"
        uses: actions/upload-artifact@v4
        with:
          name: worker-${{ matrix.worker_id }}-output
          path: worker-output/
          retention-days: 1

  parallel-aggregator:
    name: "📊 Parallel Aggregator"
    runs-on: ubuntu-latest
    needs: [parallel-coordinator, parallel-worker]
    if: always()
    
    steps:
      - name: "📥 Download All Worker Outputs"
        uses: actions/download-artifact@v4
        with:
          pattern: worker-*-output
          path: aggregated-output/
          
      - name: "🔄 Aggregate Results"
        run: |
          echo "Aggregating results from parallel workers..."
          
          TOTAL_FILES=$(find aggregated-output -name "*.txt" | wc -l)
          echo "Found $TOTAL_FILES worker outputs"
          
          # Combine all outputs
          cat aggregated-output/*/worker-*.txt > combined-output.txt
          
          echo "## Parallel Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Test ID: ${{ needs.parallel-coordinator.outputs.test_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workers Completed: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY

  # =====================================================================
  # TIMEOUT AND CANCELLATION TESTING
  # =====================================================================
  
  timeout-test-short:
    name: "⏱️ Timeout Test - Short"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'timeout-cancellation'
      
    steps:
      - name: "✅ Quick Task"
        run: |
          echo "Starting task that should complete..."
          sleep 30
          echo "✅ Task completed within timeout"

  timeout-test-long:
    name: "⏱️ Timeout Test - Long"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    continue-on-error: true
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'timeout-cancellation'
      
    steps:
      - name: "❌ Long Task (Will Timeout)"
        run: |
          echo "Starting task that will timeout..."
          sleep 120  # This will timeout after 1 minute
          echo "This should never print"

  cancellation-test:
    name: "🛑 Cancellation Test"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'timeout-cancellation'
      
    steps:
      - name: "🔄 Cancellable Loop"
        run: |
          echo "Starting cancellable task..."
          
          for i in {1..60}; do
            echo "Iteration $i/60"
            sleep 2
            
            # Check if we should cancel (this is just simulation)
            if [ $i -eq 10 ] && [ "${{ github.event.inputs.debug_mode }}" == "true" ]; then
              echo "Debug mode: Simulating cancellation request"
              exit 1
            fi
          done
          
          echo "✅ Task completed without cancellation"

  # =====================================================================
  # ARTIFACT SHARING TESTING
  # =====================================================================
  
  artifact-producer:
    name: "📤 Artifact Producer"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'artifact-sharing'
      
    steps:
      - name: "🏗️ Create Test Artifacts"
        run: |
          mkdir -p test-data
          
          # Create various test files
          echo "Test data created at $(date -u)" > test-data/metadata.txt
          echo '{"test": true, "timestamp": "'$(date -u)'"}' > test-data/data.json
          dd if=/dev/urandom of=test-data/binary.dat bs=1K count=100
          
          # Create nested structure
          mkdir -p test-data/nested/deep
          echo "Nested file" > test-data/nested/deep/file.txt
          
      - name: "📤 Upload Multiple Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact-text
          path: test-data/*.txt
          retention-days: 1
          
      - name: "📤 Upload JSON Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact-json
          path: test-data/*.json
          retention-days: 1
          
      - name: "📤 Upload Complete Archive"
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact-complete
          path: test-data/
          retention-days: 1

  artifact-consumer:
    name: "📥 Artifact Consumer"
    runs-on: ubuntu-latest
    needs: artifact-producer
    if: success()
    
    steps:
      - name: "📥 Download Specific Artifact"
        uses: actions/download-artifact@v4
        with:
          name: test-artifact-json
          path: downloaded/json/
          
      - name: "📥 Download All Artifacts"
        uses: actions/download-artifact@v4
        with:
          path: downloaded/all/
          
      - name: "🔍 Verify Artifacts"
        run: |
          echo "Verifying downloaded artifacts..."
          
          # Check JSON artifact
          if [ -f "downloaded/json/data.json" ]; then
            echo "✅ JSON artifact downloaded successfully"
            cat downloaded/json/data.json
          else
            echo "❌ JSON artifact missing"
            exit 1
          fi
          
          # List all downloaded artifacts
          echo "All downloaded artifacts:"
          find downloaded/all -type f -name "*" | head -20
          
          echo "✅ Artifact sharing validated"

  # =====================================================================
  # WORKFLOW DISPATCH TESTING
  # =====================================================================
  
  dispatch-validator:
    name: "📨 Dispatch Validator"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'workflow-dispatch'
      
    steps:
      - name: "🔍 Validate Dispatch Inputs"
        run: |
          echo "## Workflow Dispatch Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Inputs Received:" >> $GITHUB_STEP_SUMMARY
          echo "- Test Scenario: ${{ github.event.inputs.test_scenario }}" >> $GITHUB_STEP_SUMMARY
          echo "- Debug Mode: ${{ github.event.inputs.debug_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Event Context:" >> $GITHUB_STEP_SUMMARY
          echo "- Event Name: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Actor: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          
      - name: "🎯 Test Dynamic Behavior"
        run: |
          if [ "${{ github.event.inputs.debug_mode }}" == "true" ]; then
            echo "🐛 Debug mode enabled - verbose output"
            set -x
          fi
          
          case "${{ github.event.inputs.test_scenario }}" in
            "all")
              echo "Running all test scenarios"
              ;;
            "job-dependencies")
              echo "Testing job dependencies only"
              ;;
            *)
              echo "Testing specific scenario: ${{ github.event.inputs.test_scenario }}"
              ;;
          esac

  # =====================================================================
  # CONCURRENCY CONTROL TESTING
  # =====================================================================
  
  concurrency-test:
    name: "🔒 Concurrency Test [${{ matrix.instance }}]"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_scenario == 'all' ||
      github.event.inputs.test_scenario == 'concurrency-control'
    concurrency:
      group: concurrency-test-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
    strategy:
      matrix:
        instance: [A, B, C]
      max-parallel: 1  # Force sequential execution
      
    steps:
      - name: "🔒 Acquire Lock"
        run: |
          echo "Instance ${{ matrix.instance }} acquiring lock..."
          echo "Lock acquired at $(date -u)"
          
      - name: "⚡ Critical Section"
        run: |
          echo "Instance ${{ matrix.instance }} in critical section"
          # Simulate critical work
          sleep 10
          
      - name: "🔓 Release Lock"
        run: |
          echo "Instance ${{ matrix.instance }} releasing lock"
          echo "Lock released at $(date -u)"

  # =====================================================================
  # ORCHESTRATION SUMMARY
  # =====================================================================
  
  orchestration-summary:
    name: "📊 Orchestration Summary"
    runs-on: ubuntu-latest
    if: always()
    needs: [
      dependency-test-3,
      conditional-job-a,
      conditional-job-b,
      parallel-aggregator,
      timeout-test-short,
      artifact-consumer,
      dispatch-validator,
      concurrency-test
    ]
    
    steps:
      - name: "📊 Generate Summary Report"
        run: |
          echo "# 🎭 Workflow Orchestration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Scenario: ${{ github.event.inputs.test_scenario }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check each test category
          if [ "${{ needs.dependency-test-3.result }}" != "skipped" ]; then
            echo "| Job Dependencies | ${{ needs.dependency-test-3.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.conditional-job-a.result }}" != "skipped" ] || [ "${{ needs.conditional-job-b.result }}" != "skipped" ]; then
            echo "| Conditional Execution | Tested |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.parallel-aggregator.result }}" != "skipped" ]; then
            echo "| Parallel Execution | ${{ needs.parallel-aggregator.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.timeout-test-short.result }}" != "skipped" ]; then
            echo "| Timeout Handling | Tested |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.artifact-consumer.result }}" != "skipped" ]; then
            echo "| Artifact Sharing | ${{ needs.artifact-consumer.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.dispatch-validator.result }}" != "skipped" ]; then
            echo "| Workflow Dispatch | ${{ needs.dispatch-validator.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.concurrency-test.result }}" != "skipped" ]; then
            echo "| Concurrency Control | ${{ needs.concurrency-test.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Orchestration testing completed at $(date -u)" >> $GITHUB_STEP_SUMMARY