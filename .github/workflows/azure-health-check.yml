name: 🏥 Azure Resource Health Check

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      force_detailed_check:
        description: 'Force detailed health check including connectivity tests'
        type: boolean
        default: false

env:
  AZURE_SUBSCRIPTION_ID: df8fefaa-16a0-47da-ace7-6eab8b1919cf
  AZURE_RESOURCE_GROUP: kitchen-pantry-crm-rg
  AZURE_TENANT_ID: 1018280e-f485-43e4-911a-b1140fcd1f1f

jobs:
  azure-health-check:
    runs-on: ubuntu-latest
    name: 🔍 Resource Health Assessment
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🏥 Check Resource Group Health
      id: rg-health
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        
        # Check if resource group exists and is accessible
        if az group show --name $AZURE_RESOURCE_GROUP --output none 2>/dev/null; then
          echo "rg_status=healthy" >> $GITHUB_OUTPUT
          echo "✅ Resource Group: $AZURE_RESOURCE_GROUP is accessible"
        else
          echo "rg_status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ Resource Group: $AZURE_RESOURCE_GROUP is not accessible"
          exit 1
        fi
        
    - name: 🌐 Check App Service Health
      id: app-health
      run: |
        APP_NAME="kitchen-pantry-crm"
        
        # Get App Service status
        APP_STATE=$(az webapp show --name $APP_NAME --resource-group $AZURE_RESOURCE_GROUP --query "state" --output tsv)
        APP_HEALTH=$(az webapp show --name $APP_NAME --resource-group $AZURE_RESOURCE_GROUP --query "availabilityState" --output tsv)
        
        echo "app_state=$APP_STATE" >> $GITHUB_OUTPUT
        echo "app_health=$APP_HEALTH" >> $GITHUB_OUTPUT
        
        if [ "$APP_STATE" = "Running" ] && [ "$APP_HEALTH" = "Normal" ]; then
          echo "app_status=healthy" >> $GITHUB_OUTPUT
          echo "✅ App Service: $APP_NAME is running normally"
        else
          echo "app_status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ App Service: $APP_NAME - State: $APP_STATE, Health: $APP_HEALTH"
        fi
        
        # Get app service plan details
        PLAN_NAME=$(az webapp show --name $APP_NAME --resource-group $AZURE_RESOURCE_GROUP --query "serverFarmId" --output tsv | cut -d'/' -f9)
        PLAN_TIER=$(az appservice plan show --name $PLAN_NAME --resource-group $AZURE_RESOURCE_GROUP --query "sku.tier" --output tsv)
        PLAN_SIZE=$(az appservice plan show --name $PLAN_NAME --resource-group $AZURE_RESOURCE_GROUP --query "sku.name" --output tsv)
        
        echo "plan_tier=$PLAN_TIER" >> $GITHUB_OUTPUT
        echo "plan_size=$PLAN_SIZE" >> $GITHUB_OUTPUT
        
    - name: 🗄️ Check SQL Database Health
      id: sql-health
      run: |
        SQL_SERVER="kitchen-pantry-crm-sql"
        SQL_DB="kitchen-pantry-crm-db"
        
        # Check SQL Database status
        DB_STATUS=$(az sql db show --name $SQL_DB --server $SQL_SERVER --resource-group $AZURE_RESOURCE_GROUP --query "status" --output tsv)
        DB_TIER=$(az sql db show --name $SQL_DB --server $SQL_SERVER --resource-group $AZURE_RESOURCE_GROUP --query "currentServiceObjectiveName" --output tsv)
        DB_SIZE=$(az sql db show --name $SQL_DB --server $SQL_SERVER --resource-group $AZURE_RESOURCE_GROUP --query "maxSizeBytes" --output tsv)
        
        echo "db_status=$DB_STATUS" >> $GITHUB_OUTPUT
        echo "db_tier=$DB_TIER" >> $GITHUB_OUTPUT
        echo "db_size_bytes=$DB_SIZE" >> $GITHUB_OUTPUT
        
        if [ "$DB_STATUS" = "Online" ]; then
          echo "sql_status=healthy" >> $GITHUB_OUTPUT
          echo "✅ SQL Database: $SQL_DB is online ($DB_TIER)"
        else
          echo "sql_status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ SQL Database: $SQL_DB status: $DB_STATUS"
        fi
        
        # Check for any active connections/blocking
        ACTIVE_CONNECTIONS=$(az sql db show --name $SQL_DB --server $SQL_SERVER --resource-group $AZURE_RESOURCE_GROUP --query "currentServiceObjectiveName" --output tsv)
        
    - name: 📊 Check Application Insights Health
      id: insights-health
      run: |
        INSIGHTS_NAME="kitchen-pantry-crm-insights"
        
        # Check Application Insights availability
        if az monitor app-insights component show --app $INSIGHTS_NAME --resource-group $AZURE_RESOURCE_GROUP --output none 2>/dev/null; then
          echo "insights_status=healthy" >> $GITHUB_OUTPUT
          echo "✅ Application Insights: $INSIGHTS_NAME is accessible"
          
          # Get instrumentation key (redacted)
          INSTRUMENTATION_KEY=$(az monitor app-insights component show --app $INSIGHTS_NAME --resource-group $AZURE_RESOURCE_GROUP --query "instrumentationKey" --output tsv)
          echo "instrumentation_key=${INSTRUMENTATION_KEY:0:8}..." >> $GITHUB_OUTPUT
        else
          echo "insights_status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ Application Insights: $INSIGHTS_NAME is not accessible"
        fi
        
    - name: 🌍 Website Connectivity Test
      if: github.event.inputs.force_detailed_check == 'true' || github.event_name == 'schedule'
      id: connectivity
      run: |
        WEBSITE_URL="https://kitchen-pantry-crm.azurewebsites.net"
        
        # Test website connectivity
        HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" $WEBSITE_URL)
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" $WEBSITE_URL)
        
        echo "http_status=$HTTP_STATUS" >> $GITHUB_OUTPUT
        echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        
        if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 400 ]; then
          echo "website_status=healthy" >> $GITHUB_OUTPUT
          echo "✅ Website: $WEBSITE_URL (HTTP $HTTP_STATUS, ${RESPONSE_TIME}s)"
        else
          echo "website_status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ Website: $WEBSITE_URL returned HTTP $HTTP_STATUS"
        fi
        
        # Test health endpoint with detailed response
        API_URL="$WEBSITE_URL/api/health"
        API_STATUS=$(curl -o /dev/null -s -w "%{http_code}" $API_URL || echo "000")
        echo "api_status=$API_STATUS" >> $GITHUB_OUTPUT
        
        if [ "$API_STATUS" -eq 200 ]; then
          echo "✅ Health endpoint: $API_URL (HTTP $API_STATUS)"
          
          # Get health details for summary
          HEALTH_RESPONSE=$(curl -s $API_URL || echo '{"error":"failed to fetch"}')
          HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "unknown"')
          DB_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.database.status // "unknown"')
          UPTIME=$(echo "$HEALTH_RESPONSE" | jq -r '.uptime // "unknown"')
          
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "db_health_status=$DB_STATUS" >> $GITHUB_OUTPUT
          echo "app_uptime=$UPTIME" >> $GITHUB_OUTPUT
        else
          echo "❌ Health endpoint: $API_URL returned HTTP $API_STATUS"
          echo "health_status=error" >> $GITHUB_OUTPUT
          echo "db_health_status=unknown" >> $GITHUB_OUTPUT
          echo "app_uptime=unknown" >> $GITHUB_OUTPUT
        fi
        
    - name: 💰 Cost Analysis
      id: cost-analysis
      run: |
        # Get current month's usage (simplified)
        CURRENT_MONTH=$(date +%Y-%m)
        
        # Note: This requires Cost Management API access
        echo "Checking resource costs for $CURRENT_MONTH..."
        echo "cost_month=$CURRENT_MONTH" >> $GITHUB_OUTPUT
        echo "💰 Cost analysis requires additional permissions - see Azure Cost Management"
        
    - name: 📋 Generate Health Report
      run: |
        TIMESTAMP="${{ steps.rg-health.outputs.timestamp }}"
        
        # Create health report directory
        mkdir -p health-reports
        
        # Generate comprehensive health report
        cat > health-reports/health-report-$TIMESTAMP.json << EOF
        {
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "workflow_run_id": "${{ github.run_id }}",
          "subscription_id": "$AZURE_SUBSCRIPTION_ID",
          "resource_group": "$AZURE_RESOURCE_GROUP",
          "overall_health": "$([ "${{ steps.rg-health.outputs.rg_status }}" = "healthy" ] && [ "${{ steps.app-health.outputs.app_status }}" = "healthy" ] && [ "${{ steps.sql-health.outputs.sql_status }}" = "healthy" ] && echo "healthy" || echo "issues_detected")",
          "components": {
            "resource_group": {
              "status": "${{ steps.rg-health.outputs.rg_status }}",
              "name": "$AZURE_RESOURCE_GROUP"
            },
            "app_service": {
              "status": "${{ steps.app-health.outputs.app_status }}",
              "state": "${{ steps.app-health.outputs.app_state }}",
              "availability_state": "${{ steps.app-health.outputs.app_health }}",
              "plan_tier": "${{ steps.app-health.outputs.plan_tier }}",
              "plan_size": "${{ steps.app-health.outputs.plan_size }}"
            },
            "sql_database": {
              "status": "${{ steps.sql-health.outputs.sql_status }}",
              "database_status": "${{ steps.sql-health.outputs.db_status }}",
              "service_tier": "${{ steps.sql-health.outputs.db_tier }}",
              "max_size_bytes": "${{ steps.sql-health.outputs.db_size_bytes }}"
            },
            "application_insights": {
              "status": "${{ steps.insights-health.outputs.insights_status }}",
              "instrumentation_key": "${{ steps.insights-health.outputs.instrumentation_key }}"
            },
            "website_connectivity": {
              "status": "${{ steps.connectivity.outputs.website_status }}",
              "http_status": "${{ steps.connectivity.outputs.http_status }}",
              "response_time_seconds": "${{ steps.connectivity.outputs.response_time }}",
              "api_status": "${{ steps.connectivity.outputs.api_status }}"
            }
          }
        }
        EOF
        
        # Generate markdown report
        cat > health-reports/health-report-$TIMESTAMP.md << EOF
        # 🏥 PantryCRM Azure Health Report
        
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
        **Workflow:** ${{ github.workflow }}  
        **Run ID:** ${{ github.run_id }}
        
        ## 🎯 Overall Health Status
        $([ "${{ steps.rg-health.outputs.rg_status }}" = "healthy" ] && [ "${{ steps.app-health.outputs.app_status }}" = "healthy" ] && [ "${{ steps.sql-health.outputs.sql_status }}" = "healthy" ] && echo "✅ **HEALTHY** - All systems operational" || echo "⚠️ **ISSUES DETECTED** - See details below")
        
        ## 📊 Component Status
        
        ### 🌐 App Service
        - **Status:** ${{ steps.app-health.outputs.app_status }} (${{ steps.app-health.outputs.app_state }})
        - **Health:** ${{ steps.app-health.outputs.app_health }}
        - **Plan:** ${{ steps.app-health.outputs.plan_tier }} (${{ steps.app-health.outputs.plan_size }})
        
        ### 🗄️ SQL Database  
        - **Status:** ${{ steps.sql-health.outputs.sql_status }} (${{ steps.sql-health.outputs.db_status }})
        - **Tier:** ${{ steps.sql-health.outputs.db_tier }}
        - **Size:** $(echo "scale=2; ${{ steps.sql-health.outputs.db_size_bytes }} / 1024 / 1024 / 1024" | bc) GB
        
        ### 📊 Application Insights
        - **Status:** ${{ steps.insights-health.outputs.insights_status }}
        - **Key:** ${{ steps.insights-health.outputs.instrumentation_key }}
        
        ### 🌍 Website Connectivity
        - **Status:** ${{ steps.connectivity.outputs.website_status }}
        - **HTTP Status:** ${{ steps.connectivity.outputs.http_status }}
        - **Response Time:** ${{ steps.connectivity.outputs.response_time }}s
        - **API Health:** ${{ steps.connectivity.outputs.api_status }}
        
        ## 🔗 Quick Actions
        - [Azure Portal](https://portal.azure.com/#@$AZURE_TENANT_ID/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/overview)
        - [App Service Logs](https://portal.azure.com/#@$AZURE_TENANT_ID/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.Web/sites/kitchen-pantry-crm/logStream)
        - [SQL Query Editor](https://portal.azure.com/#@$AZURE_TENANT_ID/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.Sql/servers/kitchen-pantry-crm-sql/databases/kitchen-pantry-crm-db/queryEditor)
        - [Application Insights](https://portal.azure.com/#@$AZURE_TENANT_ID/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.Insights/components/kitchen-pantry-crm-insights/overview)
        EOF
        
        # Add to GitHub step summary
        cat health-reports/health-report-$TIMESTAMP.md >> $GITHUB_STEP_SUMMARY
        
    - name: 💾 Archive Health Report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ steps.rg-health.outputs.timestamp }}
        path: health-reports/
        retention-days: 30
        
    - name: 🚨 Health Alert Notification
      if: steps.rg-health.outputs.rg_status != 'healthy' || steps.app-health.outputs.app_status != 'healthy' || steps.sql-health.outputs.sql_status != 'healthy'
      run: |
        echo "🚨 HEALTH ALERT: Issues detected in Azure resources!"
        echo "Check the health report for detailed information."
        # Add webhook notification here if needed
        exit 1