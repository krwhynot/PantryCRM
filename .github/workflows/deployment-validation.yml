name: "🚀 Deployment Validation & Rollback"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - validate
          - deploy
          - rollback
          - health-check
      version:
        description: 'Version to deploy/rollback to (optional)'
        required: false
        type: string
      skip_validation:
        description: 'Skip pre-deployment validation'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  deployments: write
  actions: read
  id-token: write

env:
  AZURE_WEBAPP_NAME: 'pantry-crm-prod'
  DEPLOYMENT_TIMEOUT: 600
  HEALTH_CHECK_RETRIES: 10
  ROLLBACK_WINDOW: 3600  # 1 hour in seconds

jobs:
  # =====================================================================
  # PRE-DEPLOYMENT VALIDATION
  # =====================================================================
  
  pre-deployment-validation:
    name: "✅ Pre-Deployment Validation"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.action != 'rollback' && 
      github.event.inputs.skip_validation != 'true'
    outputs:
      validation_passed: ${{ steps.validation_summary.outputs.passed }}
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
      
    steps:
      - name: "📥 Checkout"
        uses: actions/checkout@v4
        
      - name: "🔐 Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: "📋 Create GitHub Deployment"
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment }}',
              description: 'Deployment validation for ${{ github.event.inputs.environment }}',
              auto_merge: false,
              required_contexts: []
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;
            
      - name: "🔍 Check Azure Resources"
        id: azure_check
        run: |
          echo "Checking Azure resources..."
          
          # Check App Service Plan
          PLAN_STATUS=$(az appservice plan show \
            --name "${{ env.AZURE_WEBAPP_NAME }}-plan" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            --query "properties.status" -o tsv)
            
          if [ "$PLAN_STATUS" != "Ready" ]; then
            echo "❌ App Service Plan is not ready: $PLAN_STATUS"
            exit 1
          fi
          
          # Check App Service
          APP_STATE=$(az webapp show \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            --query "state" -o tsv)
            
          if [ "$APP_STATE" != "Running" ]; then
            echo "❌ App Service is not running: $APP_STATE"
            exit 1
          fi
          
          # Check deployment slots
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            SLOT_STATE=$(az webapp show \
              --name "${{ env.AZURE_WEBAPP_NAME }}" \
              --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
              --slot staging \
              --query "state" -o tsv)
              
            if [ "$SLOT_STATE" != "Running" ]; then
              echo "⚠️ Staging slot is not running: $SLOT_STATE"
            fi
          fi
          
          echo "✅ Azure resources are ready"
          
      - name: "🔍 Validate Deployment Package"
        run: |
          # Download latest build artifact
          gh run download -n build-artifacts-${{ github.sha }} || {
            echo "❌ Build artifacts not found for SHA: ${{ github.sha }}"
            exit 1
          }
          
          # Validate package contents
          echo "Validating deployment package..."
          
          REQUIRED_FILES=(
            "package.json"
            "next.config.js"
            ".next/BUILD_ID"
            ".next/server"
            ".next/static"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -e "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          
          # Check package size
          PACKAGE_SIZE=$(du -sh . | awk '{print $1}')
          echo "📦 Package size: $PACKAGE_SIZE"
          
          # Validate BUILD_ID
          BUILD_ID=$(cat .next/BUILD_ID)
          echo "🏷️ Build ID: $BUILD_ID"
          
          echo "✅ Deployment package is valid"
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: "🔍 Environment Configuration Check"
        run: |
          echo "Checking environment configuration..."
          
          # Get current app settings
          CURRENT_SETTINGS=$(az webapp config appsettings list \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            --query "[].{name:name, value:value}" -o json)
            
          # Required environment variables
          REQUIRED_VARS=(
            "NODE_ENV"
            "DATABASE_URL"
            "NEXTAUTH_URL"
            "NEXTAUTH_SECRET"
            "JWT_SECRET"
          )
          
          # Check each required variable
          for var in "${REQUIRED_VARS[@]}"; do
            if ! echo "$CURRENT_SETTINGS" | jq -e ".[] | select(.name==\"$var\")" > /dev/null; then
              echo "❌ Missing required environment variable: $var"
              exit 1
            fi
          done
          
          echo "✅ Environment configuration is valid"
          
      - name: "🔍 Database Connectivity Test"
        run: |
          echo "Testing database connectivity..."
          
          # This would normally test actual database connection
          # For now, we'll validate the connection string format
          DB_URL=$(az webapp config appsettings list \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            --query "[?name=='DATABASE_URL'].value" -o tsv)
            
          if [[ ! "$DB_URL" =~ ^postgresql:// ]]; then
            echo "❌ Invalid database URL format"
            exit 1
          fi
          
          echo "✅ Database configuration is valid"
          
      - name: "📊 Validation Summary"
        id: validation_summary
        run: |
          echo "## 📋 Pre-Deployment Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Azure Resources | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Package | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Config | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Config | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All validation checks passed!" >> $GITHUB_STEP_SUMMARY
          
          echo "passed=true" >> $GITHUB_OUTPUT

  # =====================================================================
  # DEPLOYMENT EXECUTION
  # =====================================================================
  
  execute-deployment:
    name: "🚀 Execute Deployment"
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: |
      github.event.inputs.action == 'deploy' &&
      (needs.pre-deployment-validation.outputs.validation_passed == 'true' || 
       github.event.inputs.skip_validation == 'true')
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: "📥 Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          
      - name: "🔐 Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: "📸 Create Deployment Snapshot"
        id: snapshot
        run: |
          # Save current deployment info for rollback
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          SNAPSHOT_NAME="snapshot-${{ github.event.inputs.environment }}-$TIMESTAMP"
          
          # Get current deployment info
          az webapp deployment list \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            --query "[0]" > deployment-snapshot.json
            
          # Save app settings
          az webapp config appsettings list \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            > appsettings-snapshot.json
            
          echo "snapshot_name=$SNAPSHOT_NAME" >> $GITHUB_OUTPUT
          echo "📸 Created deployment snapshot: $SNAPSHOT_NAME"
          
      - name: "🚀 Deploy to Azure"
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: ${{ github.event.inputs.environment != 'production' && github.event.inputs.environment || '' }}
          package: .
          
      - name: "⏳ Wait for Deployment"
        run: |
          echo "Waiting for deployment to complete..."
          
          START_TIME=$(date +%s)
          TIMEOUT=${{ env.DEPLOYMENT_TIMEOUT }}
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "❌ Deployment timeout after ${TIMEOUT}s"
              exit 1
            fi
            
            # Check deployment status
            STATUS=$(az webapp show \
              --name "${{ env.AZURE_WEBAPP_NAME }}" \
              --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
              $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
              --query "state" -o tsv)
              
            if [ "$STATUS" == "Running" ]; then
              echo "✅ Deployment completed successfully"
              break
            fi
            
            echo "⏳ Waiting... ($ELAPSED/$TIMEOUT seconds)"
            sleep 10
          done
          
      - name: "🔄 Warm Up Application"
        run: |
          echo "Warming up application..."
          
          BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}"
          if [ "${{ github.event.inputs.environment }}" != "production" ]; then
            BASE_URL="${BASE_URL}-${{ github.event.inputs.environment }}"
          fi
          BASE_URL="${BASE_URL}.azurewebsites.net"
          
          # Warm up endpoints
          ENDPOINTS=(
            "/"
            "/api/health"
            "/api/auth/providers"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Warming up: $endpoint"
            curl -s -o /dev/null -w "%{http_code}" "$BASE_URL$endpoint" || true
            sleep 2
          done
          
          echo "✅ Application warmed up"

  # =====================================================================
  # POST-DEPLOYMENT VALIDATION
  # =====================================================================
  
  post-deployment-validation:
    name: "🔍 Post-Deployment Validation"
    runs-on: ubuntu-latest
    needs: execute-deployment
    if: success()
    
    steps:
      - name: "📥 Checkout Test Scripts"
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests/
            package.json
            playwright.config.ts
            
      - name: "⚙️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: "📦 Install Test Dependencies"
        run: |
          npm ci --production=false
          npx playwright install chromium
          
      - name: "❤️ Health Checks"
        id: health_check
        run: |
          BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}"
          if [ "${{ github.event.inputs.environment }}" != "production" ]; then
            BASE_URL="${BASE_URL}-${{ github.event.inputs.environment }}"
          fi
          BASE_URL="${BASE_URL}.azurewebsites.net"
          
          echo "Running health checks against: $BASE_URL"
          
          # Basic health check
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/health")
            
            if [ "$HTTP_CODE" == "200" ]; then
              echo "✅ Health check passed (attempt $i)"
              break
            else
              echo "⚠️ Health check failed (attempt $i): HTTP $HTTP_CODE"
              if [ $i -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; then
                echo "❌ Health check failed after ${{ env.HEALTH_CHECK_RETRIES }} attempts"
                exit 1
              fi
              sleep 10
            fi
          done
          
          # Response time check
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$BASE_URL/")
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME > 5" | bc -l) )); then
            echo "⚠️ Response time is high: ${RESPONSE_TIME}s"
          fi
          
      - name: "💨 Smoke Tests"
        run: |
          BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}"
          if [ "${{ github.event.inputs.environment }}" != "production" ]; then
            BASE_URL="${BASE_URL}-${{ github.event.inputs.environment }}"
          fi
          BASE_URL="${BASE_URL}.azurewebsites.net"
          
          # Run Playwright smoke tests
          PLAYWRIGHT_BASE_URL="$BASE_URL" npx playwright test tests/e2e/smoke.spec.ts --reporter=list
          
      - name: "📊 Performance Baseline"
        run: |
          BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}"
          if [ "${{ github.event.inputs.environment }}" != "production" ]; then
            BASE_URL="${BASE_URL}-${{ github.event.inputs.environment }}"
          fi
          BASE_URL="${BASE_URL}.azurewebsites.net"
          
          # Quick performance test
          npx autocannon -c 10 -d 30 -r 10 "$BASE_URL/api/health" > performance-baseline.json
          
          # Extract metrics
          AVG_LATENCY=$(cat performance-baseline.json | jq '.requests.average')
          P99_LATENCY=$(cat performance-baseline.json | jq '.requests.p99')
          ERRORS=$(cat performance-baseline.json | jq '.errors')
          
          echo "📊 Performance Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- Average Latency: ${AVG_LATENCY}ms" >> $GITHUB_STEP_SUMMARY
          echo "- P99 Latency: ${P99_LATENCY}ms" >> $GITHUB_STEP_SUMMARY
          echo "- Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
          
      - name: "✅ Update Deployment Status"
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.pre-deployment-validation.outputs.deployment_id }},
              state: status,
              environment: '${{ github.event.inputs.environment }}',
              description: `Deployment ${status}`,
              auto_inactive: true
            });

  # =====================================================================
  # ROLLBACK PROCEDURE
  # =====================================================================
  
  rollback-deployment:
    name: "⏮️ Rollback Deployment"
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: "🔐 Azure Login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: "📋 List Available Deployments"
        id: list_deployments
        run: |
          echo "Fetching deployment history..."
          
          DEPLOYMENTS=$(az webapp deployment list \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            --query "[0:10].{id:id, timestamp:received_time, author:author, message:message}" -o table)
            
          echo "Recent deployments:"
          echo "$DEPLOYMENTS"
          
          # Get specific version or latest successful
          if [ -n "${{ github.event.inputs.version }}" ]; then
            TARGET_ID="${{ github.event.inputs.version }}"
          else
            TARGET_ID=$(az webapp deployment list \
              --name "${{ env.AZURE_WEBAPP_NAME }}" \
              --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
              $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
              --query "[?status=='success'][0].id" -o tsv)
          fi
          
          echo "target_deployment=$TARGET_ID" >> $GITHUB_OUTPUT
          
      - name: "⏮️ Execute Rollback"
        run: |
          echo "Rolling back to deployment: ${{ steps.list_deployments.outputs.target_deployment }}"
          
          # Perform rollback
          az webapp deployment rollback \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            --target-id "${{ steps.list_deployments.outputs.target_deployment }}"
            
          echo "✅ Rollback initiated"
          
      - name: "⏳ Wait for Rollback"
        run: |
          echo "Waiting for rollback to complete..."
          sleep 60
          
          # Check app status
          STATUS=$(az webapp show \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ env.AZURE_WEBAPP_NAME }}-rg" \
            $([[ "${{ github.event.inputs.environment }}" != "production" ]] && echo "--slot ${{ github.event.inputs.environment }}") \
            --query "state" -o tsv)
            
          if [ "$STATUS" == "Running" ]; then
            echo "✅ Rollback completed successfully"
          else
            echo "❌ App is not running after rollback: $STATUS"
            exit 1
          fi
          
      - name: "❤️ Verify Rollback"
        run: |
          BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}"
          if [ "${{ github.event.inputs.environment }}" != "production" ]; then
            BASE_URL="${BASE_URL}-${{ github.event.inputs.environment }}"
          fi
          BASE_URL="${BASE_URL}.azurewebsites.net"
          
          # Health check
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/health")
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "✅ Application is healthy after rollback"
          else
            echo "❌ Health check failed after rollback: HTTP $HTTP_CODE"
            exit 1
          fi
          
      - name: "📢 Notify Rollback"
        if: always()
        run: |
          echo "## ⏮️ Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Target Version: ${{ steps.list_deployments.outputs.target_deployment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY